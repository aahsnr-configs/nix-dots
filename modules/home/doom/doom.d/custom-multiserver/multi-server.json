// =============================================================================
// MULTISERVER CONFIGURATIONS
// Place these files in: ~/.config/doom/lsp-bridge/multiserver/
// =============================================================================

// File: basedpyright_ruff.json
// Python with type checking (basedpyright) + linting (ruff)
{
  "name": "basedpyright_ruff",
  "languageId": "python",
  "command": [
    "basedpyright_ruff"
  ],
  "servers": [
    {
      "name": "basedpyright",
      "languageId": "python",
      "command": [
        "basedpyright-langserver",
        "--stdio"
      ],
      "settings": {},
      "initializationOptions": {
        "settings": {
          "basedpyright": {
            "analysis": {
              "autoSearchPaths": true,
              "useLibraryCodeForTypes": true,
              "diagnosticMode": "workspace",
              "typeCheckingMode": "basic"
            }
          }
        }
      }
    },
    {
      "name": "ruff",
      "languageId": "python",
      "command": [
        "ruff",
        "server",
        "--preview"
      ],
      "settings": {},
      "initializationOptions": {}
    }
  ]
}

// File: pyright_ruff.json
// Alternative: Python with pyright + ruff
{
  "name": "pyright_ruff",
  "languageId": "python",
  "command": [
    "pyright_ruff"
  ],
  "servers": [
    {
      "name": "pyright",
      "languageId": "python",
      "command": [
        "pyright-langserver",
        "--stdio"
      ],
      "settings": {},
      "initializationOptions": {
        "settings": {
          "python": {
            "analysis": {
              "autoSearchPaths": true,
              "useLibraryCodeForTypes": true,
              "diagnosticMode": "workspace"
            }
          }
        }
      }
    },
    {
      "name": "ruff",
      "languageId": "python",
      "command": [
        "ruff",
        "server"
      ],
      "settings": {},
      "initializationOptions": {}
    }
  ]
}

// File: tsserver_eslint.json
// TypeScript/JavaScript with tsserver + ESLint
{
  "name": "tsserver_eslint",
  "languageId": "typescript",
  "command": [
    "tsserver_eslint"
  ],
  "servers": [
    {
      "name": "tsserver",
      "languageId": "typescript",
      "command": [
        "typescript-language-server",
        "--stdio"
      ],
      "settings": {},
      "initializationOptions": {
        "preferences": {
          "quotePreference": "double",
          "importModuleSpecifierPreference": "relative"
        }
      }
    },
    {
      "name": "eslint",
      "languageId": "typescript",
      "command": [
        "vscode-eslint-language-server",
        "--stdio"
      ],
      "settings": {
        "validate": "on",
        "packageManager": "npm",
        "useESLintClass": false,
        "codeActionOnSave": {
          "mode": "all"
        },
        "format": true,
        "quiet": false
      },
      "initializationOptions": {}
    }
  ]
}

// File: volar_eslint.json
// Vue.js with Volar + ESLint
{
  "name": "volar_eslint",
  "languageId": "vue",
  "command": [
    "volar_eslint"
  ],
  "servers": [
    {
      "name": "volar",
      "languageId": "vue",
      "command": [
        "vue-language-server",
        "--stdio"
      ],
      "settings": {},
      "initializationOptions": {}
    },
    {
      "name": "eslint",
      "languageId": "vue",
      "command": [
        "vscode-eslint-language-server",
        "--stdio"
      ],
      "settings": {
        "validate": "on",
        "packageManager": "npm",
        "useESLintClass": false,
        "codeActionOnSave": {
          "mode": "all"
        }
      },
      "initializationOptions": {}
    }
  ]
}

// File: rust_analyzer_clippy.json
// Rust with rust-analyzer (includes clippy through checkOnSave)
// Note: Clippy is integrated into rust-analyzer, not a separate server
{
  "name": "rust_analyzer_clippy",
  "languageId": "rust",
  "command": [
    "rust_analyzer"
  ],
  "servers": [
    {
      "name": "rust-analyzer",
      "languageId": "rust",
      "command": [
        "rust-analyzer"
      ],
      "settings": {
        "rust-analyzer": {
          "cargo": {
            "loadOutDirsFromCheck": true,
            "allFeatures": true
          },
          "procMacro": {
            "enable": true
          },
          "checkOnSave": {
            "command": "clippy",
            "allFeatures": true
          },
          "diagnostics": {
            "enable": true,
            "experimental": {
              "enable": true
            }
          }
        }
      },
      "initializationOptions": {}
    }
  ]
}

// File: gopls_golangci.json
// Go with gopls + golangci-lint-langserver
{
  "name": "gopls_golangci",
  "languageId": "go",
  "command": [
    "gopls_golangci"
  ],
  "servers": [
    {
      "name": "gopls",
      "languageId": "go",
      "command": [
        "gopls"
      ],
      "settings": {
        "gopls": {
          "usePlaceholders": true,
          "completionDocumentation": true,
          "analyses": {
            "unusedparams": true,
            "shadow": true
          },
          "staticcheck": true
        }
      },
      "initializationOptions": {}
    },
    {
      "name": "golangci-lint",
      "languageId": "go",
      "command": [
        "golangci-lint-langserver"
      ],
      "settings": {},
      "initializationOptions": {
        "command": [
          "golangci-lint",
          "run",
          "--out-format",
          "json"
        ]
      }
    }
  ]
}

// File: clangd_clang_tidy.json
// C/C++ with clangd (includes clang-tidy integration)
{
  "name": "clangd_clang_tidy",
  "languageId": "c",
  "command": [
    "clangd"
  ],
  "servers": [
    {
      "name": "clangd",
      "languageId": "c",
      "command": [
        "clangd",
        "--background-index",
        "--clang-tidy",
        "--completion-style=detailed",
        "--header-insertion=iwyu"
      ],
      "settings": {},
      "initializationOptions": {
        "clangdFileStatus": true,
        "usePlaceholders": true,
        "completeUnimported": true,
        "semanticHighlighting": true
      }
    }
  ]
}

// File: html_css_json.json
// Web development: HTML + CSS + JSON language servers
{
  "name": "html_css_json",
  "languageId": "html",
  "command": [
    "html_css_json"
  ],
  "servers": [
    {
      "name": "vscode-html",
      "languageId": "html",
      "command": [
        "vscode-html-languageserver",
        "--stdio"
      ],
      "settings": {},
      "initializationOptions": {
        "embeddedLanguages": {
          "css": true,
          "javascript": true
        }
      }
    },
    {
      "name": "vscode-css",
      "languageId": "css",
      "command": [
        "vscode-css-languageserver",
        "--stdio"
      ],
      "settings": {},
      "initializationOptions": {}
    },
    {
      "name": "vscode-json",
      "languageId": "json",
      "command": [
        "vscode-json-languageserver",
        "--stdio"
      ],
      "settings": {},
      "initializationOptions": {}
    }
  ]
}

// =============================================================================
// SETUP INSTRUCTIONS
// =============================================================================
/*
1. Create the multiserver directory:
   mkdir -p ~/.config/doom/lsp-bridge/multiserver

2. Create each JSON file in that directory with the configurations above
   Example: ~/.config/doom/lsp-bridge/multiserver/basedpyright_ruff.json

3. In your Doom config.el, set:
   (setq lsp-bridge-user-multiserver-dir "~/.config/doom/lsp-bridge/multiserver")

4. Configure which multiserver to use with:
   (setq lsp-bridge-get-multi-lang-server-by-project
         (lambda (project-path filepath)
           (cond
            ((string-suffix-p ".py" filepath) "basedpyright_ruff")
            ((string-suffix-p ".ts" filepath) "tsserver_eslint")
            ((string-suffix-p ".rs" filepath) "rust_analyzer_clippy")
            (t nil))))

5. Install the required language servers:
   - Python: pip install basedpyright ruff
   - TypeScript: npm install -g typescript-language-server
   - ESLint: npm install -g vscode-langservers-extracted
   - Rust: rustup component add rust-analyzer
   - Go: go install golang.org/x/tools/gopls@latest
   - C/C++: Install clangd from your package manager

6. Restart Doom Emacs or run: M-x lsp-bridge-restart-process
*/
