#+TITLE: My Doom Emacs Config
#+AUTHOR: Ahsanur Rahman

* Catppuccin Theme
#+begin_src emacs-lisp
(use-package! catppuccin-theme
  :config
  (setq catppuccin-flavor 'mocha)
  (setq doom-theme 'catppuccin)

  ;; Enable Catppuccin quality-of-life features
  (setq catppuccin-italic-comments t
        catppuccin-italic-blockquotes t
        catppuccin-italic-variables nil
        catppuccin-highlight-matches t
        catppuccin-dark-line-numbers-background t)

  (custom-theme-set-faces! 'catppuccin
    '(default :background "#1e1e2e" :foreground "#cdd6f4")
    '(corfu-default :background "#1e1e2e" :foreground "#cdd6f4")
    '(solaire-mode-bg-face :background "#11111b")
    '(hl-line :background "#11111b" :extend t)
    '(org-block :background "#313244" :foreground "#cdd6f4" :extend t)
    '(org-block-begin-line :background "#313244" :foreground "#6c7086" :extend t)
    '(org-block-end-line :background "#313244" :foreground "#6c7086" :extend t)
    '(org-meta-line :foreground "#6c7086")
    '(org-document-info-keyword :foreground "#6c7086")
    '(mode-line :background "#181825" :foreground "#cdd6f4")
    '(mode-line-inactive :background "#11111b" :foreground "#6c7086")
    '(region :background "#585b70" :extend t)
    '(cursor :background "#f5e0dc")
    '(show-paren-match :foreground "#f5c2e7" :background "#45475a" :weight bold)
    '(minibuffer-prompt :foreground "#89dceb" :weight bold)))
#+end_src

* Code Formatting
*Disable for now*
#+begin_src emacs-lisp
;; (after! apheleia
;;   (setf (alist-get 'python-mode apheleia-mode-alist) '(ruff))
;;   (setf (alist-get 'python-ts-mode apheleia-mode-alist) '(ruff)))
#+end_src

* Dired
Configuration for Emacs's built-in file manager, `dired`. We set custom listing switches and configure it to use the system trash. We also use `dired-open` to specify external applications for certain file types.
#+begin_src emacs-lisp
(after! dired
  (setq dired-listing-switches "-agho --group-directories-first"
        delete-by-moving-to-trash t
        dired-dwim-target t))

(use-package! dired-open
  :after dired
  :config
  (setq dired-open-extensions '(("png" . "imv")
                                ("mp4" . "mpv"))))
#+end_src

* Default Settings
#+begin_src emacs-lisp
(after! evil
  (setq evil-want-fine-undo t
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-move-beyond-eol t))

(after! evil-escape
  (setq evil-escape-key-sequence "jk"
        evil-escape-delay 0.2))

;; Use visual line navigation, which is more intuitive when working with wrapped lines.
(map! :nv "j" #'evil-next-visual-line
      :nv "k" #'evil-previous-visual-line)

(setq-default internal-border-width 5)
(add-to-list 'default-frame-alist '(internal-border-width . 5))

(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))
        " - Doom Emacs"))

(setq-default ;; Indentation
              indent-tabs-mode nil
              tab-width 2
              fill-column 80

              ;; Line spacing
              line-spacing 0.02)

(setq confirm-kill-emacs nil)

(setq-default scroll-conservatively 101
              scroll-margin 0
              scroll-preserve-screen-position t)

(setq warning-suppress-types '((org-element)))

(setq split-width-threshold 170
      split-height-threshold nil)

(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

* Doom Modeline
#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-height 28
        doom-modeline-bar-width 3))
#+end_src

* Flymake
#+begin_src emacs-lisp
(after! flymake
  (setq flymake-no-changes-timeout 0.3
        flymake-start-on-save-buffer t))
#+end_src

* Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14.0 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 14.0)
      doom-big-font (font-spec :family "JetBrains Mono" :size 25))
#+end_src

* Jupyter
#+begin_src emacs-lisp
(setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                     (:session . "py")
                                                     (:kernel . "python3")))

(setq ob-async-no-async-languages-alist '("jupyter-python"))
#+end_src
* Keybindings
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle eshell split"            "e" #'+eshell/toggle
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle line numbers"            "l" #'doom/toggle-line-numbers
       :desc "Toggle markdown-view-mode"      "m" #'dt/toggle-markdown-view-mode
       :desc "Toggle truncate lines"          "t" #'toggle-truncate-lines
       :desc "Toggle treemacs"                "T" #'+treemacs/toggle
       :desc "Toggle vterm split"             "v" #'+vterm/toggle))

(map! :leader
      (:prefix ("o" . "open here")
       :desc "Open eshell here"    "e" #'+eshell/here
       :desc "Open vterm here"     "v" #'+vterm/here))

(map! :leader
      :desc "M-x" "SPC" #'execute-extended-command)

(map! :leader
      (:prefix ("l" . "literate")
       :desc "Tangle file"              "t" #'org-babel-tangle
       :desc "Execute buffer"           "x" #'org-babel-execute-buffer
       :desc "Execute buffer above"     "A" #'my/org-babel-execute-buffer-above
       :desc "Execute buffer below"     "B" #'my/org-babel-execute-buffer-below
       :desc "Execute marked blocks"    "m" #'my/org-babel-execute-marked))

(map! :leader
      (:prefix ("j" . "jupyter")
       :desc "Refresh kernelspecs"     "r" #'my/jupyter-refresh-kernelspecs
       :desc "Refresh languages"       "l" #'my/jupyter-refresh-langs
       :desc "Cleanup kernels"         "c" #'my/jupyter-cleanup-kernels
       :desc "Toggle raw output"       "o" #'my/emacs-jupyter-raw-output))

(map! :leader
      (:prefix ("c" . "code")
       :desc "Format buffer"            "=" #'apheleia-format-buffer
       :desc "Organize imports"         "o" #'eglot-code-action-organize-imports
       :desc "Rename"                   "r" #'eglot-rename
       :desc "Find references"          "R" #'xref-find-references
       :desc "Show documentation"       "h" #'eldoc-doc-buffer
       :desc "Show doc in childframe"   "H" #'eldoc-box-help-at-point
       :desc "Code actions"             "a" #'eglot-code-actions
       :desc "Find definition"          "d" #'xref-find-definitions
       :desc "Find type definition"     "D" #'eglot-find-typeDefinition
       :desc "Go back"                  "b" #'xref-go-back))

;; Flymake diagnostics navigation
(map! :after flymake
      :map flymake-mode-map
      :n "]d" #'flymake-goto-next-error
      :n "[d" #'flymake-goto-prev-error
      :leader
      (:prefix ("c" . "code")
       :desc "List diagnostics"        "x" #'flymake-show-buffer-diagnostics
       :desc "List project diagnostics" "X" #'flymake-show-project-diagnostics))

;; Org-src-mode specific keybindings
(map! :map org-src-mode-map
      :localleader
      :desc "Exit and save"        "'" #'org-edit-src-exit
      :desc "Abort edit"           "k" #'org-edit-src-abort
      :desc "Format buffer"        "=" #'apheleia-format-buffer
      :desc "Show documentation"   "h" #'eldoc-box-help-at-point
      :desc "Code actions"         "a" #'eglot-code-actions)

(map! :leader
      (:prefix ("d" . "debug/dape")
       :desc "Debug"               "d" #'dape
       :desc "Toggle breakpoint"   "b" #'dape-breakpoint-toggle
       :desc "Continue"            "c" #'dape-continue
       :desc "Next"                "n" #'dape-next
       :desc "Step in"             "i" #'dape-step-in
       :desc "Step out"            "o" #'dape-step-out
       :desc "Restart"             "r" #'dape-restart
       :desc "Kill debug session"  "k" #'dape-kill
       :desc "Debug REPL"          "R" #'dape-repl))
#+end_src

* Line Numbers
#+begin_src emacs-lisp
;; Enable absolute line numbers globally by default.
(setq display-line-numbers-type t)

;; Disable line numbers in modes where they aren't useful.
(add-hook! '(org-mode-hook
             dired-mode-hook
             magit-status-mode-hook
             eshell-mode-hook
             vterm-mode-hook
             help-mode-hook
             doom-dashboard-mode-hook)
           #'(lambda () (display-line-numbers-mode -1)))
#+end_src

* LSP Bridge
#+begin_src emacs-lisp
(use-package! lsp-bridge
  :config
  (global-lsp-bridge-mode)

  ;; This provides: basedpyright for completion/navigation + ruff for linting/formatting
  (setq lsp-bridge-python-multi-lsp-server "basedpyright_ruff"
        lsp-bridge-tex-lsp-server "texlab"
        lsp-bridge-nix-lsp-server "nil")
        ;;lsp-bridge-org-babel-lang-list nil)

  ;; Asynchronous Completion
  (setq acm-enable-doc t
        ;; acm-enable-jupyter t
        acm-enable-doc-markdown-render 'async
        acm-enable-icon t
        acm-candidate-match-function 'orderless-literal
        acm-backend-search-file-words-enable-fuzzy-match t)

  (setq lsp-bridge-enable-inlay-hint t
        lsp-bridge-enable-hover-diagnostic t
        lsp-bridge-enable-auto-format-code t
        lsp-bridge-enable-org-babel t))
#+end_src

* Org Mode

#+begin_src emacs-lisp
(defvar my/org-directory "~/org/" "The root directory for Org files.")
(defvar my/org-roam-directory (expand-file-name "roam/" my/org-directory) "The directory for Org Roam files.")

(after! org
  (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images)

  (setq org-directory my/org-directory
        org-agenda-files (list (expand-file-name "inbox.org" my/org-directory)
                               (expand-file-name "projects.org" my/org-directory)
                               (expand-file-name "habits.org" my/org-directory))
        org-default-notes-file (expand-file-name "inbox.org" my/org-directory)
        org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-confirm-babel-evaluate nil
        org-startup-with-inline-images t
        org-image-actual-width 600
        org-hide-emphasis-markers t
        org-pretty-entities t
        org-archive-location (concat my/org-directory "archive/%s_archive::")
        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCEL(c@)")
          (sequence "PLAN(P)" "ACTIVE(A)" "PAUSED(x)" "|" "ACHIEVED(a)" "DROPPED(D)")))

  ;; Set custom faces for scaled org headers to improve visual hierarchy.
  (custom-set-faces!
    '(org-level-1 :inherit 'variable-pitch :weight bold :height 1.2)
    '(org-level-2 :inherit 'variable-pitch :weight bold :height 1.13)
    '(org-level-3 :inherit 'variable-pitch :weight bold :height 1.10)
    '(org-level-4 :inherit 'variable-pitch :weight bold :height 1.07)
    '(org-level-5 :inherit 'variable-pitch :weight bold :height 1.05)
    '(org-level-6 :inherit 'variable-pitch :weight bold :height 1.03)
    '(org-level-7 :inherit 'variable-pitch :weight bold :height 1.02)
    '(org-level-8 :inherit 'variable-pitch :weight bold :height 1.0))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql")))


(use-package! org-super-agenda
  :after org-agenda
  :hook (org-agenda-mode-hook . org-super-agenda-mode))

(add-hook! 'org-mode-hook #'org-fragtog-mode)
#+end_src

* Org Modern
#+begin_src emacs-lisp
;; (after! org-modern
;;   (setq
;;    ;; Override Doom's dynamic star visibility with a consistent character.
;;    org-modern-hide-stars "· "
;;    ;; Customize the appearance of headline stars/bullets.
;;    org-modern-star '("◉" "○" "◈" "◇" "◆" "▷")
;;    ;; Customize list item bullets.
;;    org-modern-list '((43 . "➤") (45 . "–") (42 . "•"))
;;    ;; Adjust table line appearance.
;;    org-modern-table-vertical 1
;;    org-modern-table-horizontal 0.1
;;    ;; Customize the block name delimiters.
;;    org-modern-block-name '(("src" "»" "«")
;;                            ("example" "»" "«")
;;                            ("quote" "❝" "❞"))
;;    ;; Define custom checkbox characters.
;;    org-modern-checkbox '((todo . "☐") (done . "☑") (cancel . "☒") (priority . "⚑") (on . "◉") (off . "○"))
;;    ;; Override Doom's derived tag faces with a specific style for Catppuccin.
;;    org-modern-tag-faces `((:foreground ,(face-attribute 'default :foreground) :weight bold :box (:line-width (1 . -1) :color "#45475a")))))
#+end_src

* Org Roam
*org-roam* is a powerful note-taking tool for building a personal knowledge graph, inspired by the Zettelkasten method. We also enable *org-roam-ui* for a visual graph interface.
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-directory my/org-roam-directory
        org-roam-db-gc-threshold most-positive-fixnum
        org-roam-completion-everywhere t))

(use-package! org-roam-ui
  :after org-roam
  :config (setq org-roam-ui-sync-theme t
                org-roam-ui-follow t
                org-roam-ui-update-on-save t))

(use-package! consult-org-roam
  :after org-roam
  :init (consult-org-roam-mode 1))
#+end_src

* PDF Tools
#+begin_src emacs-lisp
(setq-default pdf-view-display-size 'fit-page)
(add-hook! 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)
#+end_src

* Personal Information
#+begin_src emacs-lisp
;; User Information
(setq user-full-name "Ahsanur Rahman"
      user-mail-address "ahsanur041@proton.me")
#+end_src

* Projectile
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-project-search-path '("~/projects/" "~/org/")))
#+end_src

* Rainbow Delimiters
#+begin_src emacs-lisp
;; (use-package! rainbow-delimiters
;;   :hook ((prog-mode . rainbow-delimiters-mode)
;;          (org-src-mode . rainbow-delimiters-mode)
;;          (treesit-auto-mode-hook . rainbow-delimiters-mode))

;;   ;; Catppuccin Mocha palette - these are already defined by the theme
;;   ;; but we customize for optimal nesting visibility
;;   :custom-face
;;   (rainbow-delimiters-depth-1-face ((t (:foreground "#f38ba8"))))  ; Red
;;   (rainbow-delimiters-depth-2-face ((t (:foreground "#fab387"))))  ; Peach
;;   (rainbow-delimiters-depth-3-face ((t (:foreground "#f9e2af"))))  ; Yellow
;;   (rainbow-delimiters-depth-4-face ((t (:foreground "#a6e3a1"))))  ; Green
;;   (rainbow-delimiters-depth-5-face ((t (:foreground "#74c7ec"))))  ; Sapphire
;;   (rainbow-delimiters-depth-6-face ((t (:foreground "#b4befe"))))  ; Lavender
;;   (rainbow-delimiters-depth-7-face ((t (:foreground "#cba6f7"))))  ; Mauve
;;   (rainbow-delimiters-unmatched-face ((t (:foreground "#f38ba8" :weight bold)))))
#+end_src

* Version Control
#+begin_src emacs-lisp
(after! magit
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package! magit-todos
  :after magit
  :config (magit-todos-mode 1))

(setq forge-owned-accounts '(("aahsnr")))
#+end_src

* Vertico
#+begin_src emacs-lisp
(after! vertico
  (setq vertico-count 10))
#+end_src

* Which-key
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.3
      which-key-allow-imprecise-window-fit nil)
#+end_src
