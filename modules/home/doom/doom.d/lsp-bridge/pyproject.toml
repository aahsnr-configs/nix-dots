# pyproject.toml - Comprehensive configuration for basedpyright and ruff
# Place this file in your project root

[project]
name = "my-python-project"
version = "0.1.0"
description = "A Python project with lsp-bridge, basedpyright, and ruff"
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20",
    "pandas>=1.3",
]

[project.optional-dependencies]
dev = [
    "basedpyright>=1.10.0",
    "ruff>=0.5.0",
    "pytest>=7.0",
]

###############################################################################
# Ruff Configuration
###############################################################################

[tool.ruff]
# Target Python 3.11 (adjust to your version)
target-version = "py311"

# Line length (88 is Black's default, 100 is also common)
line-length = 88

# Exclude common directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Number of spaces per indentation level (for display only)
indent-width = 4

[tool.ruff.lint]
# Enable these rule sets by default
# See: https://docs.astral.sh/ruff/rules/
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort (import sorting)
    "N",     # pep8-naming
    "UP",    # pyupgrade (modernize Python code)
    "B",     # flake8-bugbear (find likely bugs)
    "C4",    # flake8-comprehensions (better list/dict comprehensions)
    "SIM",   # flake8-simplify (simplify code)
    "TCH",   # flake8-type-checking (optimize type checking imports)
    "PTH",   # flake8-use-pathlib (prefer pathlib over os.path)
    "Q",     # flake8-quotes (enforce quote style)
    "RET",   # flake8-return (improve return statements)
    "TID",   # flake8-tidy-imports (better import organization)
    "ARG",   # flake8-unused-arguments
    "PL",    # pylint rules
    "PERF",  # perflint (performance anti-patterns)
    "RUF",   # ruff-specific rules
]

# Ignore specific rules (add as needed for your project)
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Function call in argument defaults
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
]

# Allow autofix for all enabled rules (when `--fix` is provided)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules in specific files/directories
"__init__.py" = ["F401"]  # Unused imports in __init__.py
"tests/**/*.py" = [
    "S101",   # Use of assert detected (okay in tests)
    "ARG",    # Unused arguments (fixtures)
    "PLR2004", # Magic values (okay in tests)
]

[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity
max-complexity = 10

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["my_project"]  # Replace with your package name
known-third-party = ["numpy", "pandas", "matplotlib"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
# Docstring convention (numpy, google, or pep257)
convention = "numpy"

[tool.ruff.lint.pylint]
# Maximum number of branches
max-branches = 12
# Maximum number of return statements
max-returns = 6
# Maximum number of statements in a function
max-statements = 50

[tool.ruff.format]
# Formatting options
quote-style = "double"  # Use double quotes by default
indent-style = "space"  # Use spaces (not tabs)
skip-magic-trailing-comma = false
line-ending = "auto"

# Format code snippets in docstrings
docstring-code-format = true
docstring-code-line-length = "dynamic"  # Use same as line-length

###############################################################################
# Basedpyright Configuration
###############################################################################

[tool.basedpyright]
# Type checking mode
# Options: "off" | "basic" | "standard" | "strict"
typeCheckingMode = "basic"

# Python version and platform
pythonVersion = "3.11"
pythonPlatform = "Linux"

# Include/exclude patterns
include = ["src", "tests"]
exclude = [
    "**/__pycache__",
    "**/.venv",
    "**/node_modules",
    "**/.mypy_cache",
    "**/.pytest_cache",
]

# Ignore all files in these directories
ignore = ["build", "dist"]

# Use library code for types when stubs aren't present
useLibraryCodeForTypes = true

# Infer types for function return values
strictListInference = false
strictDictionaryInference = false
strictSetInference = false

# Report missing imports
reportMissingImports = true

# Report missing type stubs
reportMissingTypeStubs = false

# Report unused imports and variables
reportUnusedImport = "warning"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportUnusedCoroutine = "warning"

# Report duplicate imports
reportDuplicateImport = "warning"

# Report incorrect usage of variables
reportUndefinedVariable = "error"
reportInvalidTypeForm = "error"
reportGeneralTypeIssues = "warning"

# Report missing return type
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownLambdaType = false

# Type completeness
reportIncompleteStub = false
reportUnsupportedDunderAll = "warning"

# Import organization
# Let ruff handle this
disableOrganizeImports = true

# Diagnostics mode
# Options: "openFilesOnly" | "workspace"
diagnosticMode = "openFilesOnly"

# Enable/disable specific diagnostic rules
enableTypeIgnoreComments = true

# Diagnostic severity overrides for strict mode
# Uncomment these if using "strict" typeCheckingMode
# [tool.basedpyright.typeCheckingMode]
# reportGeneralTypeIssues = "error"
# reportPropertyTypeMismatch = "error"
# reportFunctionMemberAccess = "error"
# reportMissingTypeStubs = "error"
# reportImportCycles = "error"
# reportUnusedImport = "error"
# reportUnusedClass = "error"
# reportUnusedFunction = "error"
# reportUnusedVariable = "error"
# reportDuplicateImport = "error"

###############################################################################
# Additional Tools Configuration (optional)
###############################################################################

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
# MyPy configuration (if you want to use it alongside basedpyright)
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

###############################################################################
# Build System (optional)
###############################################################################

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"
