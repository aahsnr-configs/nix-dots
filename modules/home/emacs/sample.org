#+title: Sample
* Org
** Directory Structure
#+begin_src emacs-lisp
(defvar my/org-directory "~/org/"
  "Base directory for all org files.")

(defvar my/org-roam-directory (expand-file-name "roam/" my/org-directory)
  "Directory for org-roam files.")

(defvar my/org-downloads-directory (expand-file-name "downloads/" my/org-directory)
  "Directory for org-download files.")

(defvar my/org-noter-directory (expand-file-name "noter/" my/org-directory)
  "Directory for org-noter files.")

(defvar my/org-archive-directory (expand-file-name "archive/" my/org-directory)
  "Directory for archived org files.")

;; Create necessary directories, including subdirectories for Org Roam templates
(dolist (dir (list my/org-directory
                   my/org-roam-directory
                   my/org-downloads-directory
                   my/org-noter-directory
                   my/org-archive-directory
                   (expand-file-name "projects/" my/org-roam-directory)
                   (expand-file-name "literature/" my/org-roam-directory)
                   (expand-file-name "ideas/" my/org-roam-directory)
                   (expand-file-name "zettel/" my/org-roam-directory)
                   (expand-file-name "attachments/" my/org-directory)
                   (expand-file-name "reviews/" my/org-directory)
                   (expand-file-name "backups/" my/org-directory)))
  (unless (file-directory-p dir)
    (make-directory dir t)))

;; This function now uses `consult--grep-builder` to rapidly
;; find project files using ripgrep, avoiding a major performance bottleneck.
(defun ar/find-org-projects ()
  "Return a list of all Org files with a \"project\" tag for capture."
  (let* ((builder (consult--grep-builder
                   (list consult-ripgrep-args
                         "--files-with-matches"
                         "--glob=*.org"
                         "^#\\+filetags:.*:project:.*"
                         (expand-file-name my/org-directory)))))
    (mapcar (lambda (file)
              (list (file-name-nondirectory file) file))
            (consult--grep-sync builder))))
#+end_src

** Core Configuration
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :mode ("\\.org\\'" . org-mode)
  :hook
  ;; Hooks for org-mode itself.
  ((org-mode . org-indent-mode)
   (org-mode . visual-line-mode)
   (org-mode . auto-fill-mode)
   (org-mode . (lambda () (setq-local yas-parents '(latex-mode))))
   (org-mode . ar/org-font-setup)
   (org-mode . (lambda ()
                 "Set evil-mode TAB behavior and other buffer-local settings for Org."
                 (setq-local electric-indent-local-mode nil)
                 (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)))

   ;; Hooks for specialized Org buffers to provide a focused, distraction-free UI.
   (org-agenda-mode . (lambda ()
                        "Configure display for Org Agenda."
                        (visual-line-mode -1)
                        (toggle-truncate-lines 1)
                        (display-line-numbers-mode 0)
                        (setq mode-line-format nil) ; Hide modeline in agenda
                        (setq header-line-format nil)))
   (org-capture-mode . (lambda ()
                         "Hide modeline in capture buffers."
                         (setq mode-line-format nil)
                         (setq header-line-format nil))))

  :custom
  (org-directory my/org-directory)
  ;; Speed up agenda generation by specifying files.
  (org-agenda-files '("~/org/inbox.org"
                      "~/org/projects.org"
                      "~/org/habits.org"
                      "~/org/goals.org"))
  (org-default-notes-file (expand-file-name "inbox.org" my/org-directory))
  ;;(org-use-property-inheritance t) ; Allow property inheritance
  (org-log-done 'time) ; Log time when tasks are marked DONE
  (org-log-into-drawer t)
  (org-return-follows-link t) ; RET follows links
  (org-src-fontify-natively t) ; Better fontification for source blocks
  (org-pretty-entities t)  ; Display LaTeX-like entities
  (org-ellipsis " ‚§µ")  ; Custom ellipsis for folded headings
  (org-cycle-separator-lines 2) ; Two blank lines between headings when cycling
  (org-startup-indented t) ; Start Org buffers indented
  (org-startup-folded 'content) ; Fold content by default
  (org-hide-leading-stars t) ; Hide leading stars for a cleaner look
  (org-confirm-babel-evaluate nil) ; Do not ask for confirmation to run code blocks
  (org-hide-emphasis-markers t) ; Hide the *, /, _, etc. emphasis markers
  (org-src-tab-acts-natively t)  ; TAB in source blocks acts like it would in that language's mode
  (org-src-preserve-indentation t) ; Preserve indentation in source blocks
  (org-startup-with-inline-images t) ; Show images inline by default
  (org-image-actual-width 600) ;  adjust them to an appropriate size
  (org-tag-alist '(("@work"      . ?w)
                   ("@home"      . ?h)
                   ("@computer"  . ?c)
                   ("@errands"   . ?e)
                   ("read"       . ?r)
                   ("meeting"    . ?m)
                   ("urgent"     . ?u)
                   ("someday"    . ?s)))

  (org-todo-keywords
   '((sequence "üì• TODO(t)" "‚ö° NEXT(n)" "‚öôÔ∏è PROG(p)" "‚è≥ WAIT(w@/!)" "|" "‚úÖ DONE(d!)" "‚ùå CANCEL(c@)")
     (sequence "üìù PLAN(P)" "üöÄ ACTIVE(A)" "‚è∏Ô∏è PAUSED(x)" "|" "üèÜ ACHIEVED(a)" "üóëÔ∏è DROPPED(D)")))
  (org-todo-keyword-faces
   '(("üì• TODO"      . (:foreground "#f7768e" :weight bold))
     ("‚ö° NEXT"      . (:foreground "#ff9e64" :weight bold))
     ("‚öôÔ∏è PROG"      . (:foreground "#7aa2f7" :weight bold))
     ("‚è≥ WAIT"      . (:foreground "#e0af68" :weight bold))
     ("‚úÖ DONE"      . (:foreground "#9ece6a" :weight bold))
     ("‚ùå CANCEL"    . (:foreground "#565f89" :weight bold))
     ("üìù PLAN"      . (:foreground "#73daca" :weight bold))
     ("üöÄ ACTIVE"    . (:foreground "#bb9af7" :weight bold))
     ("‚è∏Ô∏è PAUSED"    . (:foreground "#c0caf5" :weight bold))
     ("üèÜ ACHIEVED"  . (:foreground "#9ece6a" :weight bold))
     ("üóëÔ∏è DROPPED"   . (:foreground "#565f89" :weight bold))))
  ;; Suppress the "Babel evaluation exited with code 0" message.
  (org-babel-execution-completed-message nil)
  ;; Use the element cache for a significant performance boost in Org files.
  (org-element-use-cache t))
#+end_src

** Visual Enhancements
This section makes Org mode beautiful and ergonomic, with modern styling and seamless Vim keybindings. The `org-modern` configuration complements the base `org-todo-keyword-faces` for a rich, thematic look.
#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  ;; This package provides a cleaner, more modern look for Org buffers.
  (setq org-modern-hide-stars "¬∑ "
        org-modern-star '("‚óâ" "‚óã" "‚óà" "‚óá" "‚óÜ" "‚ñ∑")
        org-modern-list '((43 . "‚û§") (45 . "‚Äì") (42 . "‚Ä¢"))
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.1
        org-modern-block-name
        '(("src" "¬ª" "¬´")
          ("example" "¬ª" "¬´")
          ("quote" "‚ùù" "‚ùû"))

        ;; Style TODO keywords directly in the headline.
        ;; This complements the main `org-todo-keyword-faces`.
        org-modern-todo-faces
        '(("üì• TODO"      . (:foreground "#f7768e" :weight bold))
          ("‚ö° NEXT"      . (:foreground "#ff9e64" :weight bold))
          ("‚öôÔ∏è PROG"      . (:foreground "#7aa2f7" :weight bold))
          ("‚è≥ WAIT"      . (:foreground "#e0af68" :weight bold))
          ("‚úÖ DONE"      . (:background "#2f3c22" :foreground "#9ece6a" :weight bold))
          ("‚ùå CANCEL"    . (:strike-through t :foreground "#565f89"))
          ("üìù PLAN"      . (:foreground "#73daca" :weight bold))
          ("üöÄ ACTIVE"    . (:foreground "#bb9af7" :weight bold))
          ("‚è∏Ô∏è PAUSED"    . (:foreground "#c0caf5" :weight bold))
          ("üèÜ ACHIEVED"  . (:background "#364a5c" :foreground "#9ece6a" :weight bold :box t))
          ("üóëÔ∏è DROPPED"   . (:strike-through t :foreground "#565f89")))

        ;; Style tags with a subtle box, inspired by Doom Emacs.
        org-modern-tag-faces
        `((:foreground ,(face-attribute 'default :foreground) :weight bold :box (:line-width (1 . -1) :color "#3b4261")))
        org-modern-checkbox '((todo . "‚òê") (done . "‚òë") (cancel . "‚òí") (priority . "‚öë") (on . "‚óâ") (off . "‚óã"))))

(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autolinks t
        org-appear-autosubmarkers t))
#+end_src
** Capture: The Gateway to Org
Your central inbox for capturing tasks, notes, and ideas, now featuring the
advanced dynamic project task template.
*Use dynamic directory*
#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :custom
  (org-capture-templates
   '(("t" "üì• Task" entry (file+headline "~/org/inbox.org" "Tasks")
      "* üì• TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n")

     ("n" "üìù Note" entry (file+headline "~/org/inbox.org" "Notes")
      "* %? :note:\n  :PROPERTIES:\n  :CREATED: %U\n  :SOURCE: \n  :END:\n")

     ("j" "üìî Journal" entry (file+olp+datetree "~/org/journal.org")
      "* %U %?\n")

     ("m" "ü§ù Meeting" entry (file+headline "~/org/inbox.org" "Meetings")
      "* Meeting: %? :meeting:\n  :PROPERTIES:\n  :CREATED: %U\n  :ATTENDEES: \n  :END:\n** Agenda\n** Notes\n** Action Items\n")

     ("p" "üìù Project" entry (file+headline "~/org/projects.org" "Projects")
      "* üìù PLAN %? :project:\n  :PROPERTIES:\n  :CREATED: %U\n  :GOAL: \n  :DEADLINE: \n  :END:\n** Goals\n** Tasks\n*** üì• TODO Define project scope\n** Resources\n** Notes\n")
     ;;New template to add tasks directly to existing projects.
     ("P" "üìå Project Task" entry
      (file (lambda ()
              (let* ((project-list (ar/find-org-projects))
                     (project-name (completing-read "Select Project: " project-list)))
                (cdr (assoc project-name project-list)))))
      "* üì• TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n"
      :prepend t
      :headline "Tasks")

     ("b" "üìö Book" entry (file+headline "~/org/reading.org" "Reading List")
      "* %? :book:read:\n  :PROPERTIES:\n  :CREATED: %U\n  :AUTHOR: \n  :GENRE: \n  :PAGES: \n  :STARTED: \n  :FINISHED: \n  :RATING: \n  :END:\n** Summary\n** Key Takeaways\n** Quotes\n")

     ("h" "üîÑ Habit" entry (file+headline "~/org/habits.org" "Habits")
      "* üì• TODO %? :habit:\n  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")\n  :PROPERTIES:\n  :CREATED: %U\n  :STYLE: habit\n  :END:\n")

     ("g" "üéØ Goal" entry (file+headline "~/org/goals.org" "Goals")
      "* üéØ GOAL %? :goal:\n  DEADLINE: %(org-read-date nil nil \"+1y\")\n  :PROPERTIES:\n  :CREATED: %U\n  :TYPE: \n  :END:\n** Why this goal?\n** Success criteria\n** Action steps\n*** üì• TODO Break down into smaller tasks\n** Resources needed\n** Potential obstacles\n** Progress tracking\n"))))
#+end_src

** Org Habit
#+begin_src emacs-lisp
(use-package org-habit
  :ensure nil
  :after org
  :custom
  (org-habit-graph-column 60)
  (org-habit-show-habits-only-for-today t)
  (org-habit-pregraph-format "  ") ;; Corrected typo
  (org-habit-graph-mature-star "‚úÖ")
  (org-habit-graph-fresh-star "üëå")
  (org-habit-graph-ready-star "üëç")
  (org-habit-graph-early-star "üå±")
  (org-habit-graph-late-star "üëé")
  (org-habit-graph-future-star "‚Ä¶"))
#+end_src
