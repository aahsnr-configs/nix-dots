#+TITLE: Emacs Configuration
#+AUTHOR: Ahsanur Rahman
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle config.el :mkdirp yes

* Core Emacs Configuration
This section incorporates the sensible defaults and settings from the minimal-emacs.d project. This provides a robust and well-optimized foundation.
** Lexical Binding
#+begin_src emacs-lisp
;;; init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

** Startup Performance
#+begin_src emacs-lisp
;; --- Defer Garbage Collection ---
(setq gc-cons-threshold 200000000)

(setq read-process-output-max (* 3 1024 1024)) ;; 3mb
;; --- Defer UI Elements ---
;; Prevent flashes of unstyled content and unnecessary rendering.
(setq-default mode-line-format nil)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; --- Inhibit Redundant UI at Startup ---
(setq frame-inhibit-implied-resize t)
(setq frame-resize-pixelwise t)
(setq inhibit-startup-screen t
      inhibit-startup-echo-area-message user-login-name
      inhibit-startup-buffer-menu t)
(setq initial-major-mode 'fundamental-mode)

;; --- Disable Package.el ---
;; CRITICAL for Nix/Home-Manager setups. Prevents package.el from
;; initializing, which is slow and conflicts with Nix's package management.
(setq package-enable-at-startup nil)

;; --- Temporarily Disable File Name Handler ---
;; This is a major optimization that defers the loading of expensive
;; features like TRAMP until after startup.
(defvar my/file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

;; --- Restore Deferred Settings After Startup ---
;; This hook runs once Emacs is idle after starting up. It restores
;; the settings we deferred for a fast launch.
(add-hook 'emacs-startup-hook
          (defun my/restore-startup-settings ()
            "Restore settings that were deferred during startup."
            (setq gc-cons-threshold (* 8 1024 1024)) ; Restore GC to 8MB
            (setq file-name-handler-alist my/file-name-handler-alist-original)
            (setq-default mode-line-format (default-value 'mode-line-format))
            (message "Restored deferred startup settings."))
          100)
#+end_src

** NixOS Specific
#+begin_src emacs-lisp
(require 'use-package)
(setq use-package-expand-minimally t)

;; --- Manually Define XDG-Compliant Paths ---
(defvar no-littering-etc-directory
  (expand-file-name "etc/" user-emacs-directory)
  "Directory for configuration files.")
(defvar no-littering-var-directory
  (expand-file-name "var/" user-emacs-directory)
  "Directory for mutable data files.")
(defvar no-littering-cache-directory
  (expand-file-name "cache/" user-emacs-directory)
  "Directory for cache files.")

;; --- Ensure Directories Exist ---
(dolist (dir (list no-littering-etc-directory
                   no-littering-var-directory
                   no-littering-cache-directory
                   (expand-file-name "backups/" no-littering-var-directory)
                   (expand-file-name "auto-saves/" no-littering-var-directory)
                   (expand-file-name "server/" no-littering-var-directory)))
  (unless (file-directory-p dir)
    (make-directory dir t)))

;; --- Relocate Core Emacs Files ---
(setq custom-file (expand-file-name "custom.el" no-littering-etc-directory))
(setq package-user-dir (expand-file-name "elpa/" no-littering-var-directory))
(setq url-history-file (expand-file-name "url-history" no-littering-var-directory))
(setq recentf-save-file (expand-file-name "recentf" no-littering-var-directory))
(setq savehist-file (expand-file-name "savehist" no-littering-var-directory))
(setq save-place-file (expand-file-name "saveplace" no-littering-var-directory))
(setq bookmark-save-file (expand-file-name "bookmarks" no-littering-var-directory))
(setq abbrev-file-name (expand-file-name "abbrevs.el" no-littering-var-directory))
(setq tramp-persistency-file-name (expand-file-name "tramp" no-littering-var-directory))
(setq server-dir (expand-file-name "server/" no-littering-var-directory))

;; --- Relocate Backup and Auto-Save Files ---
(setq backup-directory-alist `(("." . ,(expand-file-name "backups/" no-littering-var-directory)))
      auto-save-list-file-prefix (expand-file-name "auto-save-list/" no-littering-var-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-saves/" no-littering-var-directory) t)))

;; --- Relocate Native Compilation Cache (for Emacs 29+) ---
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (expand-file-name "eln-cache" no-littering-cache-directory)))
#+end_src

** General Behaviour
#+begin_src emacs-lisp
;; Allow for shorter "y" or "n" responses.
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Allow nested minibuffers.
  (setq enable-recursive-minibuffers t)

  ;; Keep the cursor out of the read-only portions of the minibuffer.
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; No beeping or blinking on errors.
  (setq ring-bell-function 'ignore)
  (setq visible-bell nil)

  ;; Disable the obsolete practice of end-of-line spacing from the typewriter era.
  (setq sentence-end-double-space nil)

  ;; According to POSIX, a line should end with a newline.
  (setq require-final-newline t)

  ;; Move point to top/bottom of buffer before signaling a scrolling error.
  (setq scroll-error-top-bottom t)

  ;; If `scroll-conservatively' is set above 100, the window is never automatically recentered.
  (setq scroll-conservatively 101)

  ;; Number of lines of margin at the top and bottom of a window.
  (setq scroll-margin 0)

  ;; Prefer vertical splits over horizontal ones.
  (setq split-width-threshold 170
        split-height-threshold nil)

  ;; Uniquify buffer names by adding a directory prefix.
  (setq uniquify-buffer-name-style 'forward)

  ;; Delete files by moving them to the system trash.
  (setq delete-by-moving-to-trash t)
  
  ;; Disable automatic backups and lockfiles.
  (setq make-backup-files nil
        create-lockfiles nil)

  ;; Skip confirmation prompts when creating a new file or buffer
  (setq confirm-nonexistent-file-or-buffer nil)

;; Disable cursor blink for a more responsive feel and fewer redraws.
(blink-cursor-mode -1)
;; Display line and column numbers in the modeline.
(line-number-mode 1)
(column-number-mode 1)
;; Don’t compact font caches during GC-CONS-THRESHOLD.
(setq inhibit-compacting-font-caches t)
;; Ensure the column number is 1-based, not 0-based.
(setq column-number-indicator-zero-based nil)

(setq find-file-visit-truename t)
#+end_src

** Editing and Indentation
#+begin_src emacs-lisp
;; Set default indentation.
(setq-default indent-tabs-mode nil
              tab-width 2
              fill-column 80)

;; Enable multi-line commenting.
(setq comment-multi-line t)
(setq comment-empty-lines t)

;; Continue wrapped lines at whitespace.
(setq-default word-wrap t)
;; But truncate lines by default for performance. (visual-line-mode will override this)
(setq-default truncate-lines t)

;; Improve `show-paren-mode` behavior.
(setq show-paren-delay 0.1
      show-paren-when-point-inside-paren t)
(setq blink-matching-paren nil) ; Don't blink, it's distracting.
#+end_src

** Setup User
#+begin_src emacs-lisp
(setq user-full-name "Ahsanur Rahman"
      user-mail-address "ahsanur041@proton.me")
#+end_src

** Custom Functions
*** Jupyter Helper Function
#+begin_src emacs-lisp
#+end_src

** Frame Title Formatting
#+begin_src emacs-lisp
(setq-default
 frame-title-format
 '(:eval (format "[%%b%s] - %s"
           (if (buffer-modified-p)
                      " •"
             "")
           system-name)))
#+end_src

** Session Management
#+begin_src emacs-lisp
;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(use-package autorevert
  :ensure nil
  :commands (auto-revert-mode global-auto-revert-mode)
  :hook (after-init . global-auto-revert-mode)
  :custom
  (auto-revert-interval 3)
  (auto-revert-remote-files nil)
  (auto-revert-use-notify t)
  (auto-revert-avoid-polling nil)
  (auto-revert-verbose t))

;; Recentf is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(use-package recentf
  :ensure nil
  :commands (recentf-mode recentf-cleanup)
  :hook (after-init . recentf-mode)
  :custom
  (recentf-auto-cleanup (if (daemonp) 300 'never))
  (recentf-exclude
   (list "^/\\(?:ssh\\|su\\|sudo\\)?:" ; From minimal-emacs.d
          "\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
          "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
          "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
          "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"))

  :config
  ;; A cleanup depth of -90 ensures that `recentf-cleanup' runs before
  ;; `recentf-save-list', allowing stale entries to be removed before the list
  ;; is saved by `recentf-save-list', which is automatically added to
  ;; `kill-emacs-hook' by `recentf-mode'.
  (add-hook 'kill-emacs-hook #'recentf-cleanup -90))

(use-package savehist
  :ensure nil
  :commands (savehist-mode savehist-save)
  :hook (after-init . savehist-mode)
  :custom
  (savehist-autosave-interval 600)
  (savehist-additional-variables
   '(kill-ring                        ; clipboard
     register-alist                   ; macros
     mark-ring global-mark-ring       ; marks
     search-ring regexp-search-ring)))

;; save-place-mode enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
(use-package saveplace
  :ensure nil
  :commands (save-place-mode save-place-local-mode)
  :hook (after-init . save-place-mode)
  :custom
  (save-place-limit 400))

;; Enable `auto-save-mode' to prevent data loss. Use `recover-file' or
;; `recover-session' to restore unsaved changes.
(setq auto-save-default t)

(setq auto-save-interval 300)
(setq auto-save-timeout 30)

;; When auto-save-visited-mode is enabled, Emacs will auto-save file-visiting
;; buffers after a certain amount of idle time if the user forgets to save it
;; with save-buffer or C-x s for example.
;;
;; This is different from auto-save-mode: auto-save-mode periodically saves
;; all modified buffers, creating backup files, including those not associated
;; with a file, while auto-save-visited-mode only saves file-visiting buffers
;; after a period of idle time, directly saving to the file itself without
;; creating backup files.
(setq auto-save-visited-interval 5)   ; Save after 5 seconds if inactivity
(auto-save-visited-mode 1)
#+end_src

** Performance Tuning
#+begin_src emacs-lisp
(use-package so-long
  :ensure t
  :hook (emacs-startup . so-long-mode))
#+end_src

** PGTK/Wayland Mitigations
This section contains settings specifically to mitigate performance and input
issues when running the Pure GTK (PGTK) build of Emacs on Wayland.

#+begin_src emacs-lisp
(setq-default bidi-display-reordering nil)
(when (fboundp 'pgtk-use-im-context)
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (with-selected-frame frame
                (pgtk-use-im-context nil)))))
#+end_src

* General Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general
  :ensure t
  :after evil
  :config
  (general-create-definer ar/global-leader
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (ar/global-leader
    ;; Core
    "SPC" '(execute-extended-command :wk "M-x")
    "q q" '(save-buffers-kill-terminal :wk "Quit Emacs")
    "q r" '(ar/reload-config :wk "Reload Config")))
#+end_src

* UI & Theming
** Fonts
This setup defines a robust function to find and set the best available font from a priority list. It prevents errors if a font is not installed and warns the user.
#+begin_src emacs-lisp
(defun ar/set-fonts ()
  "Set the default, fixed-pitch, and variable-pitch fonts for the current frame."
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 140 :weight 'medium)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 140 :weight 'medium)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 140 :weight 'medium)
  ;; Apply italic slant to comments and keywords for visual distinction
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic))

;; Set fonts on startup and for new frames in daemon mode.
(if (daemonp)
    (add-hook 'after-make-frame-functions (lambda (frame) (with-selected-frame frame (ar/set-fonts))))
  (ar/set-fonts))

;; Adjust line spacing for better readability.
(setq-default line-spacing 0.02)

;; Ensure full syntax highlighting decoration.
(setq font-lock-maximum-decoration t)

;; Inhibit font cache compaction for performance.
(setq inhibit-compacting-font-caches t)
#+end_src

** Line Numbers
Enable line numbers for some modes
#+begin_src emacs-lisp
(dolist (mode '(prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode t))))
#+end_src

** Theming
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :config
  (load-theme 'doom-tokyo-night t)
  (doom-themes-neotree-config)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config)

  ;; Set distinct colors for bold and italic
  (custom-set-faces
   '(bold ((t (:foreground "#7aa2f7" :weight bold))))
   '(italic ((t (:foreground "#bb9af7" :slant italic))))))
#+end_src

** Solaire Mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :ensure t
  :defer t
  :hook (after-init . solaire-global-mode)
  :config
  ;; Differentiate popups from "real" buffers
  (add-hook 'completion-list-mode-hook #'solaire-mode)
  (add-hook 'which-key-mode-hook #'solaire-mode)
  (add-hook 'help-mode-hook #'solaire-mode)
  (add-hook 'info-mode-hook #'solaire-mode)
  (add-hook 'org-src-mode-hook #'solaire-mode)
  (advice-add 'vertico--display-candidates :after
              (lambda (&rest _)
                (when (minibufferp)
                  (with-selected-window (minibuffer-window) (solaire-mode +1))))))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t
  :defer t
  :custom
  (nerd-icons-font-family "JetBrainsMono Nerd Font")
  (nerd-icons-color-icons t))
#+end_src

** Modeline
This configures doom-modeline to emulate the clean, productive status bars
found in modern IDEs. The focus is on project context, VCS status, diagnostics,
and language server information, while reducing unnecessary clutter. *The commented out settings enabled by default*
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-height 1 ;; changing from 28 to 1
        ;; doom-modeline-bar-width 3
        doom-modeline-icon t
        doom-modeline-buffer-file-name-style 'auto
        doom-modeline-minor-modes nil
        ;; doom-modeline-buffer-state-icon t
        ;; doom-modeline-buffer-modification-icon t
        ;; doom-modeline-checker-simple-format t
        doom-modeline-lsp-icon t
        doom-modeline-indent-info t
        doom-modeline-matches t
        ;; doom-modeline-vcs-max-length 12
        ;; doom-modeline-position-info t
        ;; doom-modeline-window-number t
        doom-modeline-percent-position t
        doom-modeline-github-timer nil
        doom-modeline-gnus-timer nil))

  ;;disable for now
  ;; (custom-set-faces
  ;;  '(mode-line ((t (:family "JetBrainsMono Nerd Font" :height 1.0))))
  ;;  '(mode-line-active ((t (:family "JetBrainsMono Nerd Font" :height 1.0))))
  ;;  '(mode-line-inactive ((t (:family "JetBrainsMono Nerd Font" :height 1.0)))))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq dashboard-banner-logo-title "Welcome to Emacs!")
  (setq dashboard-startup-banner 'logo)
  ;; For example: (setq dashboard-startup-banner "~/.emacs.d/emacs_logo.png")

  ;; Set the content of the dashboard
  (setq dashboard-items '((recents   . 5)
                         (bookmarks . 5)
                         (projects  . 5)
                         (agenda    . 5)))

  ;; Center the dashboard content
  (setq dashboard-center-content t)

  ;; Enable icons
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-icon-type 'nerd-icons)

  :config
  ;; Enable the dashboard on startup
  (dashboard-setup-startup-hook)
  ;; If you are using emacsclient, you'll want to see the dashboard when you create a new frame.
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :defer t
  :hook (after-init . which-key-mode)
  :custom
  (which-key-idle-delay 0.1)
  (which-key-separator " → ")
  (which-key-popup-type 'minibuffer))
#+end_src

** Hide Modeline
#+begin_src emacs-lisp
;; <
(defun ar/hide-modeline-for-special-buffers ()
  "Hide the modeline in special buffers starting and ending with '*'.
An exclusion list prevents this for essential buffers like *scratch*
or compilation buffers where the modeline provides useful info."
  (let ((buf-name (buffer-name))
        ;; Add buffer names here to prevent their modelines from being hidden.
        (exclude-list '("*scratch*"
                         "*Messages*"
                         "*dashboard*"
                         ;; "*compilation*"
                         ;; "*Agenda Commands*"
                         "*grep*"
                         "*vterm*"
                         )))
    (when (and buf-name
               (> (length buf-name) 2) ; Ensure buffer name is not just "**"
               (string-prefix-p "*" buf-name)
               (string-suffix-p "*" buf-name)
               (not (member buf-name exclude-list)))
      (setq-local mode-line-format nil))))

;; This hook runs whenever a buffer's major mode is initialized,
;; applying the rule to all new and existing special buffers.
(add-hook 'after-change-major-mode-hook #'ar/hide-modeline-for-special-buffers)
#+end_src

** Frame Padding
A small internal border is added around the frame to create visual breathing room between the text and the window edge.
#+begin_src emacs-lisp
(setq-default internal-border-width 5)
(add-to-list 'default-frame-alist '(internal-border-width . 5))
#+end_src

* Evil
** Undo System
#+begin_src emacs-lisp
;; The undo-fu package is a lightweight wrapper around Emacs' built-in undo
;; system, providing more convenient undo/redo functionality.
(use-package undo-fu
  :ensure t
  :commands (undo-fu-only-undo
             undo-fu-only-redo
             undo-fu-only-redo-all
             undo-fu-disable-checkpoint)
  :config
  (global-unset-key (kbd "C-z"))
  (global-set-key (kbd "C-z") 'undo-fu-only-undo)
  (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))

;; The undo-fu-session package complements undo-fu by enabling the saving
;; and restoration of undo history across Emacs sessions, even after restarting.
(use-package undo-fu-session
  :ensure t
  :commands undo-fu-session-global-mode
  :hook (after-init . undo-fu-session-global-mode))
#+end_src

** Core Evil
#+begin_src emacs-lisp
;; Uncomment the following if you are using undo-fu
(setq evil-undo-system 'undo-fu)

;; Vim emulation
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)

  :config
  (evil-mode 1)

  :custom
  (evil-ex-visual-char-range t)
  (evil-ex-search-vim-style-regexp t)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-echo-state nil)
  (evil-move-cursor-back nil)
  (evil-v$-excludes-newline t)
  (evil-want-C-h-delete t)
  (evil-want-C-u-delete t)
  (evil-want-fine-undo t)
  (evil-move-beyond-eol t)
  (evil-search-wrap nil)
  (evil-want-Y-yank-to-eol t))
#+end_src

** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :init
  ;; It has to be defined before evil-colllection
  (setq evil-collection-setup-minibuffer t)
  :config
  (evil-collection-init))
#+end_src

** Evil Extensions
#+begin_src emacs-lisp
(use-package evil-surround :ensure t :hook (evil-mode . global-evil-surround-mode))
(use-package evil-nerd-commenter :ensure t :after evil)

(use-package evil-numbers :ensure t :after evil)
(use-package evil-args :ensure t :after evil)
(use-package evil-anzu :ensure t :after evil)
(use-package evil-exchange :ensure t :after evil :config (evil-exchange-install))
(use-package evil-indent-plus :ensure t :after evil :config (evil-indent-plus-default-bindings))
(use-package evil-visualstar :ensure t :hook (evil-mode . global-evil-visualstar-mode))
(use-package evil-matchit :ensure t :hook (evil-mode . global-evil-matchit-mode))
(use-package evil-snipe :ensure t :after evil :config (evil-snipe-mode 1) (evil-snipe-override-mode 1))

(use-package evil-lion
  :ensure t
  :after evil
  :hook (prog-mode . evil-lion-mode))

(use-package evil-multiedit :ensure t :after evil :config (evil-multiedit-default-keybinds))
(use-package evil-goggles :ensure t :hook (evil-mode . evil-goggles-mode) :custom (evil-goggles-duration 0.1))

(use-package evil-escape
  :ensure t
  :hook (evil-mode . evil-escape-mode)
  :custom
  (evil-escape-key-sequence "jk")
  (evil-escape-delay 0.2)
  (evil-escape-excluded-modes '(dired-mode)))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(with-eval-after-load 'evil-maps
  (evil-define-key '(normal visual) 'global "gc" 'evilnc-comment-or-uncomment-lines))
#+end_src

* Editor Behaviour
** Lines Behaviour
#+begin_src emacs-lisp
;; Highlight the current line
(add-hook 'after-init-hook #'global-hl-line-mode)
;; Use visual line mode for soft wrapping instead of truncating lines
(add-hook 'after-init-hook #'global-visual-line-mode)
#+end_src

** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :after evil
  :hook ((prog-mode . smartparens-mode)
         (text-mode . smartparens-mode)
         (markdown-mode . smartparens-mode)
         (org-mode . smartparens-mode))
  :config
  ;; not recommended for use
  ;; (smartparens-global-strict-mode 1)

  ;; --- UI and Behavior Customizations ---
  (setq sp-show-pair-delay 0.1
        sp-show-pair-from-inside t))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((text-mode . rainbow-delimiters-mode)
         (prog-mode . rainbow-delimiters-mode)
         (org-src-mode-hook . rainbow-delimiters-mode))
  :config
  ;; Custom faces updated for the Tokyonight color palette.
  :custom-face
  (rainbow-delimiters-depth-1-face ((t (:foreground "#7aa2f7"))))  ; Blue
  (rainbow-delimiters-depth-2-face ((t (:foreground "#bb9af7"))))  ; Magenta
  (rainbow-delimiters-depth-3-face ((t (:foreground "#e0af68"))))  ; Yellow
  (rainbow-delimiters-depth-4-face ((t (:foreground "#73daca"))))  ; Cyan
  (rainbow-delimiters-depth-5-face ((t (:foreground "#f7768e"))))  ; Red
  (rainbow-delimiters-depth-6-face ((t (:foreground "#9ece6a"))))  ; Green
  (rainbow-delimiters-depth-7-face ((t (:foreground "#ff9e64"))))  ; Orange
  (rainbow-delimiters-depth-8-face ((t (:foreground "#c0caf5"))))  ; Foreground
  (rainbow-delimiters-depth-9-face ((t (:foreground "#a9b1d6"))))) ; Sub-Foreground
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :defer t
  :hook ((prog-mode . rainbow-mode)
         (org-mode . rainbow-mode)))
#+end_src

** Buffer Terminator
#+begin_src emacs-lisp
(use-package buffer-terminator
  :ensure t
  :defer t
  :custom
  ;; Enable/Disable verbose mode to log buffer cleanup events
  (buffer-terminator-verbose nil)

  ;; Set the inactivity timeout (in seconds) after which buffers are considered
  ;; inactive (default is 30 minutes):
  (buffer-terminator-inactivity-timeout (* 30 60)) ; 30 minutes

  ;; Define how frequently the cleanup process should run (default is every 10
  ;; minutes):
  (buffer-terminator-interval (* 10 60)) ; 10 minutes

  :config
  (buffer-terminator-mode 1))
#+end_src

** Inhibit Mouse
*disable for now*
#+begin_src emacs-lisp
;; (use-package inhibit-mouse
;;   :ensure t
;;   :config
;;   (if (daemonp)
;;       (add-hook 'server-after-make-frame-hook #'inhibit-mouse-mode)
;;     (inhibit-mouse-mode 1)))
#+end_src

** Shackle for Popup Window Management
This provides a declarative way to control where and how special-purpose buffers
appear, ensuring a consistent and predictable windowing layout.
#+begin_src emacs-lisp
(use-package shackle
  :ensure t
  :hook (after-init . shackle-mode)
  :config
  (setq shackle-rules
   '(;; FIX: Add this rule at the beginning to prevent Shackle from managing Treemacs.
     ;; This allows Treemacs to use its own logic for side-window placement.
     ;;("^\\*treemacs.*\\*$" :side left :size 35)
     ;; Rule for Help buffers
     ("\\`\\*Help" :align bottom :size 0.3)
     ;; Rule for compilation/grep/etc.
     ("^\\*.*compilation.*\\*$" :align bottom :size 0.3)
     ("^\\*grep.*\\*$" :align bottom :size 0.3)
     ;; Rule for Embark
     ("\\`\\*Embark Collect" :align bottom :size 0.25)
     ;; Rules for the debugger (dape)
     ("\\`\\*dap-repl" :align right :size 0.4)
     ("\\`\\*dap-locals" :align right :size 0.4)
     ("\\`\\*dap-breakpoints" :align right :size 0.4)
     ("\\`\\*dap-sessions" :align right :size 0.4))
   shackle-inhibit-window-quit-on-same-buffer t))
#+end_src

** TODO Combobulate
#+begin_src emacs-lisp
;; (use-package combobulate
;;    :custom
;;    ;; You can customize Combobulate's key prefix here.
;;    ;; Note that you may have to restart Emacs for this to take effect!
;;    (combobulate-key-prefix "C-c o")
;;    :hook ((prog-mode . combobulate-mode))
;;    ;; Amend this to the directory where you keep Combobulate's source
;;    ;; code.
;;    :load-path ("~/.config/emacs/lisp/combobulate"))
#+end_src
** Helpful
*helpful* is an alternative to the built-in Emacs help that provides much more contextual information.
#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :commands (helpful-callable
             helpful-variable
             helpful-key
             helpful-command
             helpful-at-point
             helpful-function)
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-function] . helpful-callable)
  ([remap describe-key] . helpful-key)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  :custom
  (helpful-max-buffers 7))
#+end_src

** Wgrep: Writable Grep
#+begin_src emacs-lisp
(use-package wgrep
  :ensure t
  :commands (wgrep-change-to-wgrep-mode)
  :config
  ;; evil-collection provides bindings like :wq to save and :q! to abort.
  (setq wgrep-auto-save-buffer t))
#+end_src

** Indent Bars
#+begin_src emacs-lisp
(use-package indent-bars
  :ensure t
  :hook ((prog-mode . indent-bars-mode)
         (tex-mode . indent-bars-mode))
  :config
  (require 'indent-bars-ts)
  (setopt indent-bars-no-descend-lists t
          indent-bars-treesit-support t
          indent-bars-width-frac 0.3))
#+end_src

** Jinx
#+begin_src emacs-lisp
(use-package jinx
  :ensure t
  :hook (after-init . jinx-mode)
  :custom
  ;; Sensibly disable Jinx in modes where spell-checking is not desired.
  ;; This includes programming modes, UI-centric modes, and special buffers.
  (jinx-disabled-modes
   '(prog-mode           ; All programming modes
     conf-mode           ; All configuration file modes
     emacs-lisp-mode     ; Specifically for elisp
     dired-mode          ; File manager
     ibuffer-mode        ; Buffer list
     neotree-mode        ; File tree
     magit-status-mode   ; Magit UI
     magit-log-mode
     magit-diff-mode
     magit-branch-mode
     org-agenda-mode     ; Agenda view is not for writing
     org-src-mode        ; Don't check inside code blocks
     dashboard-mode      ; Startup dashboard
     which-key-mode      ; Keybinding helper
     help-mode           ; Help buffers
     Info-mode           ; Info documentation
     embark-collect-mode ; Embark's special buffer
     vterm-mode          ; Terminal emulator
     pdf-view-mode))     ; PDF viewer

    ;; Ensure the personal dictionary file exists, creating it if necessary.
  (let ((dict-file (expand-file-name "dict.txt" user-emacs-directory)))
    (unless (file-exists-p dict-file)
      (write-region "" nil dict-file)))

  (ar/global-leader
    "j" '(:ignore t :wk "jinx (spellcheck)")
    "j c" '(jinx-correct :wk "Correct word at point")
    "j n" '(jinx-next-error :wk "Go to next error")
    "j p" '(jinx-previous-error :wk "Go to previous error")
    "j s" '(jinx-suggest :wk "Show suggestions")
    "j a" '(jinx-add-word-to-personal-dictionary :wk "Add to dictionary")
    "j l" '(jinx-languages :wk "Select language")
    "j t" '(jinx-toggle-checking :wk "Toggle checking in buffer")))
#+end_src

* Completion Framework
** Orderless for Advanced Filtering
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :config
    ;; Configuration to be evaluated before the package is loaded.
    ;; Define a special, more restrictive completion style for Corfu.
    ;; This style only matches characters literally and in order, which prevents
    ;; the auto-completion popup from feeling chaotic.
    (orderless-define-completion-style orderless-literal-only
      (orderless-style-dispatchers nil)
      (orderless-matching-styles '(orderless-literal)))

    ;; Use a hook to apply our special style only when Corfu is active.
    ;; This is the key to having powerful filtering for commands (like M-x)
    ;; but simple, predictable filtering for auto-completion.
    (add-hook 'corfu-mode-hook
              (lambda ()
                (setq-local completion-styles '(orderless-literal-only basic)
                            completion-category-overrides nil
                            completion-category-defaults nil)))

    ;; Global settings managed by use-package.
    :custom
    ;; Use orderless as the primary completion style globally.
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)

    ;; Use standard completion for file paths for a more predictable experience.
    (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-category-overrides '((file (styles basic partial-completion))))

    ;; Add dispatchers for more precise filtering (e.g., =literal, %regexp)
    ;; This enables advanced features for Consult/Vertico.
    (orderless-dispatchers
     '(orderless-consult-dispatch orderless-affix-dispatch)))
#+end_src

** Vertico: The Vertical Completion UI
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :hook (after-init . vertico-mode)
  :custom
  (vertico-resize nil)
  (vertico-cycle t)
  (vertico-count 10))
#+end_src

** Vertico Directory
*vertico-directory* simplifies directory navigation.
#+begin_src emacs-lisp
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode))
#+end_src

** Nerd Icons Completion
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :ensure t
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
  (nerd-icons-completion-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :bind
  ;; Remap default commands to their Consult versions for a unified interface.
  ([remap switch-to-buffer] . consult-buffer)
  ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
  ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
  ([remap bookmark-jump] . consult-bookmark)
  ([remap evil-show-marks] . consult-mark)
  ([remap evil-show-jumps] . consult-jump-list)
  ([remap goto-line] . consult-goto-line)
  ([remap imenu] . consult-imenu)
  ([remap load-theme] . consult-theme)
  ([remap recentf-open-files] . consult-recent-file)
  ([remap yank-pop] . consult-yank-pop)

  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Tweak the register preview for `consult-register-load',
  ;; `consult-register-store' and the built-in commands.  This improves ;; register formatting, adds thin separator lines, register sorting and hides the window mode line.
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  (setq consult-prompt-margin 0)
  (setq consult-preview-key 'any)

  :config
    (setq consult-buffer-sources
        '(consult--source-recent-file
          consult--source-bookmark))
    ;; Configure preview keys for various commands.
  ;; A delayed preview is used to avoid performance issues.
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep consult-man
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file
   consult--source-bookmark consult--source-file-register
   
    consult--source-project-recent-file
   :preview-key "C-SPC"))
#+end_src

** Embark
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (define-key embark-collect-mode-map (kbd "e") #'embark-export)
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

** Embark Consult
#+begin_src emacs-lisp
(use-package embark-consult
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Wgrep: Writable Grep
This package allows you to edit the contents of a grep/search results buffer
and apply those changes directly to the source files. It is a powerful tool for
project-wide refactoring.
#+begin_src emacs-lisp
(use-package wgrep
  :defer t
  :ensure t
  :config
  (setq wgrep-auto-save-buffer t))
#+end_src

** Corfu: The Core UI with Smart TAB Navigation
*disabled in favor of lsp-bridge*
#+begin_src emacs-lisp
;; (use-package corfu
;;   :ensure t
;;   :hook (after-init . global-corfu-mode)
;;   :init
;;   (corfu-history-mode)
;;   (corfu-popupinfo-mode)

;;   ;; A list of modes where Corfu should be disabled to prevent conflicts.
;;   (defvar ar/corfu-disabled-modes
;;     '(erc-mode
;;       circe-mode
;;       help-mode
;;       gud-mode
;;       vterm-mode
;;       eshell-mode
;;       term-mode
;;       shell-mode
;;       comint-mode))

;;   :config
;;   (add-hook 'corfu-mode-hook
;;             (lambda ()
;;               (when (memq major-mode ar/corfu-disabled-modes)
;;                 (corfu-mode -1))))

;;   :custom
;;   (corfu-cycle t)                       ; Allow cycling from last to first candidate
;;   (corfu-auto t)                        ; Enable auto-completion
;;   (corfu-auto-resize nil)               ; Do not resize the popup
;;   (corfu-auto-delay 0.13)               ; Delay before auto-completion appears
;;   (corfu-preselect 'prompt)             ; Pre-select the first candidate
;;   (corfu-quit-at-boundary 'separator)   ; Quit completion when you cross a boundary (e.g., space)
;;   (corfu-quit-no-match 'separator)      ; Quit if there are no matches
;;   (corfu-on-exact-match nil)            ; Do not automatically select an exact match

;;   :bind
;;   (:map corfu-map
;;         ("TAB" . corfu-next)            ; Use TAB to navigate to next candidate
;;         ([tab] . corfu-next)            ; Also bind the tab key event
;;         ("S-TAB" . corfu-previous)      ; Use Shift-TAB to navigate to previous candidate
;;         ([backtab] . corfu-previous)))  ; Alternative binding for Shift-TAB
#+end_src

** Smart TAB Configuration
*Turned off in favor of lsp-bridge*
#+begin_src emacs-lisp
;; (use-package emacs
;;   :ensure nil
;;   :custom
;;   ;; TAB cycle if there are only few candidates (3 or less)
;;   (completion-cycle-threshold 3)

;;   ;; Enable indentation+completion using the TAB key.
;;   ;; TAB will first try to indent the line. If the line is already indented,
;;   ;; it will then trigger completion. This is the recommended approach.
;;   (tab-always-indent 'complete)

;;   ;; Control when TAB completes on first press vs requiring a second press
;;   ;; nil: always complete immediately (if line is already indented)
;;   ;; 'eol: only complete if point is at end of line
;;   ;; 'word: complete unless next char has word syntax
;;   ;; 'word-or-paren: complete unless next char is word or parenthesis
;;   (tab-first-completion 'word-or-paren)

;;   ;; Hide commands in M-x which do not work in the current mode.
;;   ;; Corfu commands are hidden since they are not meant to be used via M-x.
;;   (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

** Nerd Icons for Corfu
#+begin_src emacs-lisp
;; (use-package nerd-icons-corfu
;;   :ensure t
;;   :after (corfu nerd-icons)
;;   :config (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape: Completion Backends
*Disable in favor of lsp-bridge*
#+begin_src emacs-lisp
;; (use-package cape
;;   :ensure t
;;   :init
;;   (add-to-list 'completion-at-point-functions #'cape-dabbrev)
;;   (add-to-list 'completion-at-point-functions #'cape-file)
;;   (add-to-list 'completion-at-point-functions #'cape-keyword)
;;   (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
;;   :config
;;   (advice-add #'comint-completion-at-point :around #'cape-wrap-nonexclusive)
;;   (advice-add #'eglot-completion-at-point :around #'cape-wrap-nonexclusive)
;;   (advice-add #'pcomplete-completions-at-point :around #'cape-wrap-nonexclusive))
#+end_src

** Dabbrev
*Disabled in favor of lsp-bridge*
#+begin_src emacs-lisp
;; (use-package dabbrev
;;   ;; Swap M-/ and C-M-/
;;   :bind (("M-/" . dabbrev-completion)
;;          ("C-M-/" . dabbrev-expand))
;;   :config
;;   (setq dabbrev-friend-buffer-function #'+corfu-dabbrev-friend-buffer-p
;;         dabbrev-ignored-buffer-regexps
;;         '("\\` "
;;           "\\(?:\\(?:[EG]?\\|GR\\)TAGS\\|e?tags\\|GPATH\\)\\(<[0-9]+>\\)?")
;;         dabbrev-upcase-means-case-search t)
;;   (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
;;   (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
;;   (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
#+end_src

* Org Mode
** Dynamic Directory Structure
#+begin_src emacs-lisp
;; Define base directory
(defvar my/org-directory (expand-file-name "~/org/")
  "Base directory for all org files.")

;; Define subdirectories relative to base
(defvar my/org-subdirs
  '("roam" "downloads" "noter" "archive"
    "roam/projects" "roam/literature" "roam/ideas" "roam/zettel"
    "attachments" "reviews" "backups")
  "List of subdirectories to create under `my/org-directory'.")

;; Helper function to get org subdirectory paths
(defun my/org-subdir (subdir)
  "Return full path for SUBDIR under `my/org-directory'."
  (expand-file-name subdir my/org-directory))

;; Lazy directory creation - only when needed
(defun my/ensure-org-dir (subdir)
  "Ensure SUBDIR exists under `my/org-directory'."
  (let ((dir (my/org-subdir subdir)))
    (unless (file-directory-p dir)
      (make-directory dir t))
    dir))

;; Create all directories at startup
(mapc #'my/ensure-org-dir my/org-subdirs)

;; Define convenience variables
(defvar my/org-roam-directory (my/org-subdir "roam/"))
(defvar my/org-downloads-directory (my/org-subdir "downloads/"))
(defvar my/org-noter-directory (my/org-subdir "noter/"))
(defvar my/org-archive-directory (my/org-subdir "archive/"))

;; Improved project finder using directory-files-recursively
(defun my/find-org-projects ()
  "Return list of org files tagged as projects."
  (let* ((default-directory my/org-directory)
         (files (directory-files-recursively
                 my/org-directory
                 "\\.org$"
                 nil
                 (lambda (dir)
                   (not (string-match-p "/\\(\\.git\\|archive\\|backups\\)/" dir))))))
    (seq-filter
     (lambda (file)
       (with-temp-buffer
         (insert-file-contents file nil 0 2000)
         (goto-char (point-min))
         (re-search-forward "^#\\+filetags:.*:project:" nil t)))
     files)))
#+end_src

** Better Font Faces
#+begin_src emacs-lisp
(defun ar/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.13)
                  (org-level-3 . 1.10)
                  (org-level-4 . 1.07)
                  (org-level-5 . 1.05)
                  (org-level-6 . 1.03)
                  (org-level-7 . 1.02)
                  (org-level-8 . 1)))
    (set-face-attribute (car face) nil :font "JetBrainsMono Nerd Font" :weight 'bold :height (cdr face))))
#+end_src

** Core Configuration
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook
  ((org-mode . org-indent-mode)
   (org-mode . visual-line-mode)
   (org-mode . ar/org-font-setup)
   (org-mode . auto-fill-mode)
   (org-mode . (lambda () (setq-local yas-parents '(latex-mode))))
   (org-mode . (lambda ()
                 (setq-local electric-indent-local-mode nil) ; Prevent aggressive auto-indent
                 (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)))
   (org-agenda-mode . (lambda ()
                        (visual-line-mode -1)
                        (toggle-truncate-lines 1)
                        (display-line-numbers-mode 0)
                        (setq mode-line-format nil)
                        (setq header-line-format nil)))
   (org-capture-mode . (lambda ()
                         (setq mode-line-format nil)
                         (setq header-line-format nil))))

  :custom
  (org-directory my/org-directory)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-return-follows-link t)
  (org-src-fontify-natively t)
  (org-pretty-entities t)
  ;; (org-ellipsis " ▾")
  (org-cycle-separator-lines 2)
  (org-startup-indented t)
  (org-startup-folded 'content)
  (org-hide-leading-stars t)
  (org-confirm-babel-evaluate nil)
  (org-hide-emphasis-markers t)
  (org-src-tab-acts-natively t)
  (org-src-preserve-indentation t)
  (org-startup-with-inline-images t)
  (org-image-actual-width 600)

  (org-tag-alist '(("@work"      . ?w)
                   ("@home"      . ?h)
                   ("@computer"  . ?c)
                   ("@errands"   . ?e)
                   ("read"       . ?r)
                   ("meeting"    . ?m)
                   ("urgent"     . ?u)
                   ("someday"    . ?s)))

  (org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCEL(c@)")
     (sequence "PLAN(P)" "ACTIVE(A)" "PAUSED(x)" "|" "ACHIEVED(a)" "DROPPED(D)")))

  (org-todo-keyword-faces
   '(("TODO"      . (:foreground "#f7768e" :weight bold))
     ("NEXT"      . (:foreground "#ff9e64" :weight bold))
     ("PROG"      . (:foreground "#7aa2f7" :weight bold))
     ("WAIT"      . (:foreground "#e0af68" :weight bold))
     ("DONE"      . (:foreground "#9ece6a" :weight bold))
     ("CANCEL"    . (:foreground "#565f89" :weight bold))
     ("PLAN"      . (:foreground "#73daca" :weight bold))
     ("ACTIVE"    . (:foreground "#bb9af7" :weight bold))
     ("PAUSED"    . (:foreground "#c0caf5" :weight bold))
     ("ACHIEVED"  . (:foreground "#9ece6a" :weight bold))
     ("DROPPED"   . (:foreground "#565f89" :weight bold))))

  (org-babel-execution-completed-message nil)
  (org-element-use-cache t))
#+end_src

** Babel & Structure Templates
Configure code block execution and create handy shortcuts for inserting common structures.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; Load a comprehensive list of languages for Org Babel.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)
     (sql . t)
     (gnuplot . t)))

  ;; Automatically display generated images (like plots) after execution.
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

  ;; Enable structure templates for quickly inserting source blocks.
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Visual Enhancements
This section makes Org mode beautiful and ergonomic, with modern styling and seamless Vim keybindings. The `org-modern` configuration complements the base `org-todo-keyword-faces` for a rich, thematic look.
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-hide-stars "· "
        org-modern-star '("◉" "○" "◈" "◇" "◆" "▷")
        org-modern-list '((43 . "➤") (45 . "–") (42 . "•"))
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.1
        org-modern-block-name
        '(("src" "»" "«")
          ("example" "»" "«")
          ("quote" """ """))

        org-modern-todo-faces
        '(("TODO"      . (:foreground "#f7768e" :weight bold))
          ("NEXT"      . (:foreground "#ff9e64" :weight bold))
          ("PROG"      . (:foreground "#7aa2f7" :weight bold))
          ("WAIT"      . (:foreground "#e0af68" :weight bold))
          ("DONE"      . (:background "#2f3c22" :foreground "#9ece6a" :weight bold))
          ("CANCEL"    . (:strike-through t :foreground "#565f89"))
          ("PLAN"      . (:foreground "#73daca" :weight bold))
          ("ACTIVE"    . (:foreground "#bb9af7" :weight bold))
          ("PAUSED"    . (:foreground "#c0caf5" :weight bold))
          ("ACHIEVED"  . (:background "#364a5c" :foreground "#9ece6a" :weight bold :box t))
          ("DROPPED"   . (:strike-through t :foreground "#565f89")))

        org-modern-tag-faces
        `((:foreground ,(face-attribute 'default :foreground)
           :weight bold
           :box (:line-width (1 . -1) :color "#3b4261")))

        org-modern-checkbox '((todo . "☐") (done . "☑") (cancel . "☒"))))
#+end_src

** Org Roam: The Knowledge Graph
Org Roam is configured for rapid, Zettelkasten-style note-taking. Templates are minimal and flexible, and the UI is integrated to feel like a natural extension of Emacs.
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :defer t
  :after org
  :init
  (setq org-roam-directory my/org-roam-directory)
  (setq org-roam-db-location (expand-file-name "org-roam.db" no-littering-var-directory))
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-node-display-template
   (concat "${title:*} "
           (propertize "${tags:20}" 'face 'org-tag)))
  :config
  (org-roam-db-autosync-mode)

  ;; Configure the backlinks buffer to appear in a right-hand sidebar.
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  ;; Templates for different kinds of notes (Zettelkasten).
  (setq org-roam-capture-templates
      '(("d" "default" plain "* %?"
         :target (file+head "${slug}.org"
                            "#+title: ${title}\n#+filetags: \n\n")
         :unnarrowed t)
        ("p" "project" plain "* Goal\n\n%?\n\n* Tasks\n\n* Notes\n\n* Log\n"
         :target (file+head "projects/${slug}.org"
                            "#+title: Project: ${title}\n#+filetags: project\n")
         :unnarrowed t)
        ("l" "literature note" plain "* Source\n  - Author: \n  - Title: \n  - Year: \n\n* Summary\n\n%?\n\n* Key Takeaways\n\n* Quotes\n"
         :target (file+head "literature/${slug}.org"
                            "#+title: ${title}\n#+filetags: literature\n")
         :unnarrowed t)
        ("i" "idea" plain "* %?"
         :target (file+head "ideas/${slug}.org"
                            "#+title: ${title}\n#+filetags: idea fleeting\n")
         :unnarrowed t)
        ("z" "zettel" plain "* %?\n\n* References\n\n"
         :target (file+head "zettel/${slug}.org"
                            "#+title: ${title}\n#+filetags: zettel permanent\n")
         :unnarrowed t)
        ("j" "journal" plain "* Log\n\n%?"
         :target (file+olp+datetree (expand-file-name "journal.org" my/org-roam-directory))
         :unnarrowed t))))

(use-package org-roam-ui
  :ensure t
  :after org-roam
  :commands (org-roam-ui-mode org-roam-ui-open)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start nil))

(use-package consult-org-roam
  :ensure t
  :after (consult org-roam)
  :init (consult-org-roam-mode 1))
#+end_src

** Capture: The Gateway to Org
Your central inbox for capturing tasks, notes, and ideas, now featuring the
advanced dynamic project task template.
*Use dynamic directory*
#+begin_src emacs-lisp
(use-package org-capture
  :after org
  :custom
  (org-capture-templates
   `(("t" "Task" entry
      (file+headline ,(expand-file-name "inbox.org" my/org-directory) "Tasks")
      "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n")

     ("n" "Note" entry
      (file+headline ,(expand-file-name "inbox.org" my/org-directory) "Notes")
      "* %? :note:\n:PROPERTIES:\n:CREATED: %U\n:SOURCE:\n:END:\n")

     ("j" "Journal" entry
      (file+olp+datetree ,(expand-file-name "journal.org" my/org-directory))
      "* %U %?\n")

     ("m" "Meeting" entry
      (file+headline ,(expand-file-name "inbox.org" my/org-directory) "Meetings")
      "* Meeting: %? :meeting:\n:PROPERTIES:\n:CREATED: %U\n:ATTENDEES:\n:END:\n** Agenda\n** Notes\n** Action Items\n")

     ("p" "Project" entry
      (file+headline ,(expand-file-name "projects.org" my/org-directory) "Projects")
      "* PLAN %? :project:\n:PROPERTIES:\n:CREATED: %U\n:GOAL:\n:DEADLINE:\n:END:\n** Goals\n** Tasks\n*** TODO Define project scope\n** Resources\n** Notes\n")

     ("P" "Project Task" entry
      (file (lambda ()
              (let* ((files (my/find-org-projects))
                     (file (completing-read "Select Project: "
                                           (mapcar #'file-name-nondirectory files)
                                           nil t)))
                (car (seq-filter
                      (lambda (f) (string= (file-name-nondirectory f) file))
                      files)))))
      "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n"
      :prepend t
      :headline "Tasks")

     ("b" "Book" entry
      (file+headline ,(expand-file-name "reading.org" my/org-directory) "Reading List")
      "* %? :book:read:\n:PROPERTIES:\n:CREATED: %U\n:AUTHOR:\n:GENRE:\n:PAGES:\n:STARTED:\n:FINISHED:\n:RATING:\n:END:\n** Summary\n** Key Takeaways\n** Quotes\n")

     ("h" "Habit" entry
      (file+headline ,(expand-file-name "habits.org" my/org-directory) "Habits")
      "* TODO %? :habit:\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d>\")\n:PROPERTIES:\n:CREATED: %U\n:STYLE: habit\n:END:\n")

     ("g" "Goal" entry
      (file+headline ,(expand-file-name "goals.org" my/org-directory) "Goals")
      "* GOAL %? :goal:\nDEADLINE: %(org-read-date nil nil \"+1y\")\n:PROPERTIES:\n:CREATED: %U\n:TYPE:\n:END:\n** Why this goal?\n** Success criteria\n** Action steps\n*** TODO Break down into smaller tasks\n** Resources needed\n** Potential obstacles\n** Progress tracking\n"))))
#+end_src

** Org Habit
#+begin_src emacs-lisp
(use-package org-habit
  :ensure nil
  :after org
  :custom
  (org-habit-graph-column 60)
  (org-habit-show-habits-only-for-today t)
  (org-habit-preceding-days 21)
  (org-habit-following-days 7)

  ;; Use nerd-icons instead of emojis
  (org-habit-completed-glyph
   (string-to-char (nerd-icons-codicon "nf-cod-check")))
  (org-habit-today-glyph
   (string-to-char (nerd-icons-codicon "nf-cod-circle_filled"))))
#+end_src
  
** Org Download for Images
This package streamlines adding images and screenshots to Org mode, using the *swappy* annotation tool and Spacemacs-style keybindings.
#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :after org
  :custom
  ;; Defines the shell command to run for taking a screenshot. It uses slurp
  ;; to select a region, grim to capture it, and pipes the result into swappy
  ;; for editing. The final output is then captured by org-download.
  (org-download-screenshot-method "grim -g \"$(slurp)\" - | swappy -f - -o -")

  ;; Save images in a subdirectory named "assets" relative to the Org file.
  (org-download-image-dir "assets")

  ;; Use the 'attach' method to create a unique timestamped filename.
  (org-download-method 'attach)
  (org-download-timestamp "%Y-%m-%d-%H%M%S_")

  ;; Automatically display the image inline after it's added.
  (org-download-display-inline t)
  (org-image-actual-width 600)

  :config
  ;; A known fix to prevent an extra newline from being inserted when
  ;; dragging and dropping files.
  (advice-add 'org-download-dnd :after #'org-download-display-inline-images)

  ;; Define Spacemacs-style keybindings under your global leader key.
  (ar/global-leader
    "i" '(:ignore t :wk "insert")
    "i s" '(org-download-screenshot :wk "Screenshot")
    "i y" '(org-download-yank :wk "Yank Image from Clipboard")))
#+end_src

** Evil Integration
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar todo))))
  (add-to-list 'evil-emacs-state-modes 'org-agenda-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
  ;; Org-mode specific bindings
  "o" '(:ignore t :wk "org")
 "o a" '(org-agenda :wk "agenda")
 "o c" '(org-capture :wk "capture")
 "o s" '(org-schedule :wk "schedule")
 "o d" '(org-deadline :wk "deadline")
 "o t" '(org-set-tags-command :wk "set tags")

 ;; Org-roam specific bindings under "org roam"
 "o r" '(:ignore t :wk "roam")
 "o r f" '(org-roam-node-find :wk "find node")
 "o r i" '(org-roam-node-insert :wk "insert node")
 "o r c" '(org-roam-capture :wk "roam capture")
 "o r g" '(org-roam-graph :wk "show graph")
 "o r t" '(org-roam-tag-add :wk "add tag")

 "o n" '(:ignore t :which-key "org noter")
 "o n n" '(ar/org-noter-find-or-create-notes :wk "Open/Create PDF Notes")
 "o n i" '(org-noter-insert-note :wk "Insert Note"))
#+end_src

* Jupyter Notebooks
** Core Setup
#+begin_src emacs-lisp
(use-package jupyter
  :ensure t
  :after org
  :config
  ;; Configure Org Babel to use Jupyter for python and hy.
  (with-eval-after-load 'ob-jupyter
    (org-babel-jupyter-override-src-block "python"))

  ;; Define Spacemacs-style keybindings for Jupyter commands.
  (ar/global-leader
    "j" '(:ignore t :wk "jupyter")
    "j c" '(my/jupyter-connect-repl :wk "Connect to REPL")
    "j q" '(my/jupyter-qtconsole :wk "Open QtConsole")
    "j C" '(my/jupyter-cleanup-kernels :wk "Cleanup Old Kernels")
    "j L" '(my/jupyter-refesh-langs :wk "Refresh Languages")))

(use-package ob-async
  :ensure t
  :after org
  :config
  (setq ob-async-no-async-languages-alist '("python" "jupyter-python")))
#+end_src

** ANSI Colors
#+begin_src emacs-lisp
(defun my/babel-ansi ()
  "Apply ANSI color codes to the result of an Org Babel block."
  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
    (save-excursion
      (goto-char beg)
      (when (looking-at org-babel-result-regexp)
        (let ((end (org-babel-result-end))
              (ansi-color-context-region nil))
          (ansi-color-apply-on-region beg end))))))

(define-minor-mode org-babel-ansi-colors-mode
  "Apply ANSI color codes to Org Babel results globally."
  :global t
  :init-value t
  (if org-babel-ansi-colors-mode
      (add-hook 'org-babel-after-execute-hook #'my/babel-ansi)
    (remove-hook 'org-babel-after-execute-hook #'my/babel-ansi)))
#+end_src

* LSP Bridge
#+begin_src emacs-lisp
(use-package lsp-bridge
  :config
  (global-lsp-bridge-mode)

  ;; This provides: basedpyright for completion/navigation + ruff for linting/formatting
  (setq lsp-bridge-python-multi-lsp-server "basedpyright_ruff"
        lsp-bridge-tex-lsp-server "texlab"
        lsp-bridge-nix-lsp-server "nil")
        ;;lsp-bridge-org-babel-lang-list nil)

  ;; Asynchronous Completion
  (setq acm-enable-doc t
        acm-enable-doc-markdown-render 'async
        acm-enable-icon t
        acm-candidate-match-function 'orderless-literal
        acm-backend-search-file-words-enable-fuzzy-match t)

  (setq lsp-bridge-enable-inlay-hint t
        lsp-bridge-enable-hover-diagnostic t
        lsp-bridge-enable-auto-format-code t
        lsp-bridge-enable-org-babel t)

  ;; Performance optimization
  (setq lsp-bridge-completion-popup-predicates
        '(lsp-bridge-not-match-stop-commands
          lsp-bridge-not-match-hide-characters
          lsp-bridge-not-in-string
          lsp-bridge-not-in-org-table)))

  )
#+end_src

* Workflow Management
** Dired
#+begin_src emacs-lisp
(use-package fd-dired
  :ensure t
  :defer t
  :config
  (setq fd-dired-use-gnu-find-syntax t))

;; Provides commands to open files with external applications.
(use-package dired-open
  :ensure t
  :defer t
  :config
  (setq dired-open-extensions '(("png" . "imv") ("mp4" . "mpv"))))

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :custom
  (dired-listing-switches "-agho --group-directories-first")
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  :config
  ;; Define evil-mode keys for a vim-like experience.
  (evil-define-key 'normal dired-mode-map
    ;; Navigation
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file-other-window ; Open in other window is often more useful
    (kbd "j") 'dired-next-line
    (kbd "k") 'dired-previous-line
    (kbd "G") 'dired-goto-file
    (kbd "gg") 'dired-first-line
    (kbd "^") 'dired-goto-root-directory
    (kbd "~") 'dired-home
    (kbd "RET") 'dired-find-file
    (kbd "i") 'dired-maybe-insert-subdir
    ;; Marking
    (kbd "m") 'dired-mark
    (kbd "u") 'dired-unmark
    (kbd "U") 'dired-unmark-all-marks
    (kbd "t") 'dired-toggle-marks
    ;; File Operations
    (kbd "C-n") 'dired-create-file
    (kbd "C-d") 'dired-create-directory
    (kbd "R") 'dired-do-rename
    (kbd "D") 'dired-do-delete
    (kbd "C") 'dired-do-copy
    (kbd "X") 'dired-open-file ; Use dired-open to open externally
    (kbd "M") 'dired-do-chmod
    (kbd "O") 'dired-do-chown))

;; dired-x for additional functionality
(use-package dired-x
  :ensure nil
  :after dired
  :custom (dired-x-hands-off-my-keys nil)
  :config
  ;; Define dired-omit-files to prevent void-variable errors
  (setq dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$")
  (setq dired-omit-verbose nil))

;; Asynchronously display git status in Dired. Highly performant.
(use-package dired-git-info
  :ensure t
  :after dired
  :hook (dired-mode . dired-git-info-mode)
  :config
  ;; Fix for "Wrong number of arguments: #<subr max>, 0" error.
  (setq dgi-auto-hide-details-p nil))

;; Adds Nerd Font icons to Dired.
(use-package nerd-icons-dired
  :ensure t
  :hook (dired-mode . nerd-icons-dired-mode))

;; Allows editing directory listings directly (wdired) with ranger-like keys.
(use-package dired-ranger
  :ensure t
  :after dired
  :config
  (define-key dired-mode-map (kbd "y") 'dired-ranger-copy)
  (define-key dired-mode-map (kbd "p") 'dired-ranger-paste)
  (define-key dired-mode-map (kbd "x") 'dired-ranger-move))
#+end_src

** Neotree
This setup configures *neotree*, a fast and simple file tree explorer. It is
themed with nerd-icons and integrates with evil-mode for vim-like navigation.
#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :defer t
  :custom
  (neo-smart-open t)
  (neo-window-width 30)
  (neo-show-hidden-files t)
  (neo-autorefresh t)
  (neo-theme 'nerd-icons)
  ;; Ensure 'q' quits neotree, which is idiomatic in vim/evil.
  (evil-define-key 'normal neotree-mode-map "q" 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-select-window))
#+end_src
 
** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
 "f" '(:ignore t :wk "file")
 "f f" '(find-file :wk "find file")
 "f e" '(dired (or (buffer-file-name) default-directory) :wk "explore directory")
 "f r" '(consult-recent-file :wk "find recent file")
 "f t" '(neotree-toggle :wk "toggle file tree")
 "f d" '(neotree-dir :wk "find in file tree"))
#+end_src

* Development Tools
** Envrc
#+begin_src emacs-lisp
(use-package envrc
  :ensure t
  :config
  (envrc-global-mode))
#+end_src

** Eglot
*Disabled in favor of lsp-bridge*
#+begin_src emacs-lisp
;; (use-package eglot
;;   :ensure t
;;   :defer t
;;   :hook (prog-mode . eglot-ensure)
;;   :custom
;;   (eglot-autoshutdown nil)
;;   (eglot-events-buffer-size 0)
;;   ;;(eglot-extend-to-xref nil)
;;   (eglot-ignored-server-capabilities
;;    '(:hoverProvider
;;      :documentHighlightProvider
;;      :documentFormattingProvider
;;      :documentRangeFormattingProvider
;;      :documentOnTypeFormattingProvider
;;      :colorProvider
;;      :foldingRangeProvider))
;;   (eglot-stay-out-of '(yasnippet)))
;; 
;; (use-package eglot-booster
;;   :ensure t
;;   :after eglot
;;   :config
;;   (eglot-booster-mode))
#+end_src

** Eldoc Box
Display eldoc documentation in a popup frame at point.
#+begin_src emacs-lisp
;; (use-package eldoc-box
;;   :ensure t
;;   :config
;;   (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t)
;;   :custom
;;   (eldoc-box-show-if-no-doc nil)
;;   (eldoc-echo-area-display-truncation-p nil)
;;   :custom-face
;;   (eldoc-box-border ((t (:foreground "#3b4261"))))
;;   (eldoc-highlight-symbol-face ((t (:foreground "#7aa2f7" :weight bold)))))
#+end_src

** Consult Integration
#+begin_src emacs-lisp
;; ;; Provides a powerful consult interface for Eglot's LSP features.
;; (use-package consult-eglot
;;   :ensure t
;;   :after (consult eglot))
;; 
;; ;; Integrates consult-eglot sources with Embark actions.
;; (use-package consult-eglot-embark
;;   :ensure t
;;   :after (consult-eglot embark))
#+end_src

** Robust Debugger UI
We use *dape* for debugging. The UI for debugger windows is cleanly managed by the enhanced *shackle* configuration in my *Editor Behaviour* section.
#+begin_src emacs-lisp
(use-package dape
  :ensure t
  :defer t
  :commands (dape dape-debug-recent)
  :hook
  ;; Use GUD's tooltip mode for mouse-hover variable inspection.
  (dape-session-mode-hook . gud-tooltip-mode)
  :config
  ;; Set the breakpoint file location to be inside the var directory.
  (setq dape-breakpoint-file (expand-file-name "dape-breakpoints" no-littering-var-directory))
  ;; Persist breakpoints across Emacs sessions.
  (add-hook 'kill-emacs-hook #'dape-breakpoint-save)
  (add-hook 'after-init-hook #'dape-breakpoint-load))

(ar/global-leader
 ;; Debugging Keybindings (DAPE)
 "d" '(:ignore t :wk "debug (dape)")
 "d b" '(dape-toggle-breakpoint-at-point :wk "breakpoint")
 "d c" '(dape-continue :wk "continue")
 "d n" '(dape-next :wk "next")
 "d i" '(dape-step-in :wk "step in")
 "d o" '(dape-step-out :wk "step out")
 "d q" '(dape-disconnect :wk "quit")
 "d r" '(dape-debug-recent :wk "debug recent")
 "d e" '(dape :wk "debug new")
 "d B" '(ar/dape-debug-org-src-block :wk "debug org block"))
#+end_src

** Syntax Checking
This setup uses the built-in *flymake* for live diagnostics, enhanced by *flymake-collection* for easy linter integration, and *apheleia* for automatic, on-save formatting.
#+begin_src emacs-lisp
;; (use-package flymake
;;   :ensure t
;;   :hook (prog-mode . flymake-mode)
;;   :custom
;;   (flymake-check-syntax-automatically '(save mode-enabled))
;;   (flymake-idle-change-delay 0.1)
;;   :custom-face
;;   (flymake-error   ((t (:underline (:style wave :color "#f7768e") :inherit nil))))  (flymake-warning ((t (:underline (:style wave :color "#e0af68") :inherit nil))))  (flymake-note    ((t (:underline (:style wave :color "#73daca") :inherit nil)))))
;; 
;; ;; A much cleaner way to add support for checkers like pylint and flake8.
;; (use-package flymake-collection
;;   :ensure t
;;   :after flymake)
;;   ;; will use use-package setup
;;   ;; :config
;;   ;; (flymake-collection-hook-setup)
;; 
;; (use-package sideline-flymake
;;   :ensure t
;;   :hook (flymake-mode . sideline-mode)
;;   :init
;;   (setq sideline-flymake-display-mode 'point)
;;   (setq sideline-backends-right '(sideline-flymake)))
#+end_src

** Formatting
#+begin_src emacs-lisp
(use-package apheleia
  :ensure t
  :defer t
  :config
  (apheleia-global-mode +1))
#+end_src

** Tree-sitter for syntax highlighting
#+begin_src emacs-lisp
(with-eval-after-load 'treesit
  (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
  (add-to-list 'major-mode-remap-alist '(markdown-mode . markdown-ts-mode))
  (add-to-list 'major-mode-remap-alist '(latex-mode . latex-ts-mode)))

(use-package treesit-fold
  :ensure t
  :hook (treesit-auto-mode-hook . treesit-fold-mode))

(use-package evil-textobj-tree-sitter
  :ensure t
  :after evil
  :config
  ;; Goto start of next function
  (define-key evil-normal-state-map
              (kbd "]f")
              (lambda ()
                (interactive)
                (evil-textobj-tree-sitter-goto-textobj "function.outer")))

  ;; Goto start of previous function
  (define-key evil-normal-state-map
              (kbd "[f")
              (lambda ()
                (interactive)
                (evil-textobj-tree-sitter-goto-textobj "function.outer" t)))

  ;; Goto end of next function
  (define-key evil-normal-state-map
              (kbd "]F")
              (lambda ()
                (interactive)
                (evil-textobj-tree-sitter-goto-textobj "function.outer" nil t)))

  ;; Goto end of previous function
  (define-key evil-normal-state-map
              (kbd "[F")
            (lambda ()
              (interactive)
              (evil-textobj-tree-sitter-goto-textobj "function.outer" t t))))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
 "l" '(:ignore t :which-key "lsp (eglot)")
 "l a" '(eglot-code-actions :wk "code actions")
 "l d" '(xref-find-definitions :wk "go to definition")
 "l D" '(xref-find-declarations :wk "go to declaration")
 "l i" '(xref-find-implementations :wk "go to implementation")
 "l r" '(xref-find-references :wk "find references")
 "l s" '(consult-imenu :wk "buffer symbols")
 "l S" '(consult-eglot-symbols :wk "project symbols")
 "l R" '(eglot-rename :wk "rename")
 "l f" '(apheleia-format-buffer :wk "format buffer")
 "l e" '(consult-flymake :wk "buffer errors")
 "l E" '(consult-eglot-diagnostics :wk "project errors")
 "l h" '(:ignore t :which-key "help")
 "l h h" '(eldoc-doc-buffer :wk "show full documentation")
 "l h d" '(eldoc-doc-buffer :wk "show doc in popup"))
#+end_src

* Python Development
** LSP: Eglot with Pyright
#+begin_src emacs-lisp
;; (with-eval-after-load 'eglot
;;   ;; Register pyright-langserver for Python modes.
;;   (add-to-list 'eglot-server-programs
;;                '((python-ts-mode) . ("basedpyright-langserver" "--stdio"))))
#+end_src

** Diagnostics: Flymake with Ruff, Mypy, and Bandit
#+begin_src emacs-lisp
;; (push
;;  '(python-ts-mode
;;    flymake-collection-ruff
;;    (flymake-collection-mypy)
;;    (flymake-collection-bandit))
;;  flymake-collection-config)
#+end_src

** Formatting: Apheleia with Ruff
We use *apheleia* to automatically format Python code on save. By using *ruff* as the backend, we ensure that formatting is consistent with our linter rules.
#+begin_src emacs-lisp
(with-eval-after-load 'apheleia
  (setf (alist-get 'python-mode apheleia-formatters)
        '("ruff" "format" "-")))
#+end_src

** Debugging: Dape with debugpy
*No need for a separate dape configuration since dape already provides a an
optimized config for debugpy*
#+begin_src emacs-lisp
;; (with-eval-after-load 'dape
;;   ;; Register a debug template for Python using debugpy. This defines how
;;   ;; dape will launch the debugger for Python files.
;;   (dape-register-debug-template
;;    "Python (debugpy)"
;;    (list :type "python"
;;          :request "launch"
;;          :name "Dape: Python File"
;;          :program "${file}"
;;          :console "internalConsole"))
;; 
;;   ;; Interactive function to start a debug session for the current Python buffer.
;;   (defun ar/dape-debug-python-file ()
;;     "Start a DAPE debug session for the current Python file."
;;     (interactive)
;;     (unless (eq major-mode 'python-ts-mode)
;;       (error "Not in a Python buffer"))
;;     (dape-debug-by-template "Python (debugpy)")))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
 ;; Add to the existing debug (dape) leader map
 "d" '(:ignore t :wk "debug (dape)")
 "d p" '(ar/dape-debug-python-file :wk "Debug Python File"))
#+end_src

* Version Control
** Magit: The Core Git Client
*magit* is the central hub for all Git operations. This configuration ensures it works seamlessly with a full-frame UI and other packages.
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :init
  (setq magit-auto-revert-mode nil)
  :commands (magit-status magit-blame)
  :custom
  ;; For a focused view, display the Magit status buffer in its own frame.
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  ;; Automatically save file-visiting buffers before staging changes.
  (magit-save-repository-buffers 'dont-confirmk)
  :config
  ;; When quitting Magit, this ensures the previous window configuration is restored.
  ;; The `magit-display-buffer-fullframe-status-v1` function saves the layout
  ;; to the `:magit-fullscreen` register, which we jump back to.
  (defun ar/magit-quit-and-restore-windows ()
    "Kill the Magit buffer and restore the previous window configuration."
    (interactive)
    (kill-buffer (current-buffer))
    (when (get-register :magit-fullscreen)
      (jump-to-register :magit-fullscreen)))

  ;; Bind "q" in the status buffer to our custom quitting function.
  (define-key magit-status-mode-map (kbd "q") #'ar/magit-quit-and-restore-windows))
#+end_src

** Forge: Git Forge Integration
*forge* provides integration with online Git forges (e.g., GitHub, GitLab).
#+begin_src emacs-lisp
(use-package forge
  :ensure t
  :after magit)
#+end_src

** Magit Todos
*magit-todos* displays TODO items from your project files in the status buffer.
#+begin_src emacs-lisp
(use-package magit-todos
  :ensure t
  :after magit
  :hook (magit-mode . magit-todos-mode))
#+end_src

** Git Timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t
  :after magit
  :config
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision))
#+end_src

** Git Gutter: Live Diff Highlighting
git-gutter provides live, inline diff indicators in the fringe, showing
which lines have been added, modified, or deleted. This is a crucial
feature for at-a-glance understanding of changes.
#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :hook (prog-mode . git-gutter-mode)
  :custom
  ;; Only update the gutter when the buffer is saved, for performance.
  (git-gutter:update-on-save t)
  ;; Use a lighter touch for updates; avoids refreshing on every change.
  (git-gutter:update-method "idle")
  :config
  ;; Define keybindings for evil-mode for navigating between hunks.
  (with-eval-after-load 'evil
    (define-key evil-normal-state-map (kbd "]g") 'git-gutter:next-hunk)
    (define-key evil-normal-state-map (kbd "[g") 'git-gutter:previous-hunk))

  ;; Add a keybinding to stage the current hunk directly.
  ;; need to fix
  ;; (define-key git-gutter-mode-map (kbd "C-x C-s") 'git-gutter:stage-hunk)

)
#+end_src

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
 "g" '(:ignore t :wk "git")
 "g s" '(magit-status :wk "status")
 "g c" '(magit-commit :wk "commit")
 "g C" '(magit-commit-amend :wk "commit amend")
 "g p" '(magit-push-current-to-pushremote :wk "push")
 "g P" '(magit-pull-from-upstream :wk "pull")
 "g b" '(magit-branch :wk "branches")
 "g l" '(magit-log-buffer-file :wk "log current file")
 "g L" '(magit-log-current :wk "log current branch")
 "g d" '(magit-diff-unstaged :wk "diff")
 "g f" '(magit-fetch :wk "fetch")
 "g m" '(magit-merge :wk "merge")
 "g r" '(magit-rebase :wk "rebase")
 "g n" '(git-gutter:next-hunk :wk "next hunk")
 "g N" '(git-gutter:previous-hunk :wk "previous hunk")
 "g S" '(git-gutter:stage-hunk :wk "stage hunk"))
#+end_src

* PDF-Tools
** Core
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :magic ("%PDF" . pdf-view-mode)
  :hook (pdf-view-mode . pdf-view-midnight-minor-mode)

  ;; Theme customization to match doom-tokyo-night.
  :custom
  ;; Use the specific Tokyonight background and foreground colors for the PDF view.
  (pdf-view-midnight-colors '("#1a1b26" . "#c0caf5"))
  ;; Enable continuous scrolling for a smoother experience.
  (pdf-view-continuous t)

  :custom-face
  ;; Customize other faces to match the Tokyonight aesthetic.
  (pdf-view-highlight-face ((t (:background "#e0af68" :foreground "#1a1b26")))) ; Yellow
  (pdf-view-link-face ((t (:foreground "#7aa2f7"))))      ; Blue
  (pdf-view-active-link-face ((t (:foreground "#bb9af7")))); Magenta

  :config

  ;; Ensure Org mode integration is set up after Org itself is loaded.
  (with-eval-after-load 'org
    (add-to-list 'org-open-at-point-functions 'org-pdftools-open-link)
    (setq org-pdftools-link-prefix "pdf")))
#+end_src

** org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :ensure t
  :after (org pdf-view)
  :custom
  ;; Store all notes inside the dedicated `noter` directory.
  (org-noter-notes-search-path (list my/org-noter-directory))
  ;; Use a consistent naming scheme for note files.
  (org-noter-notes-file-name "%s.org")
  ;; Automatically create a new heading for each note.
  (org-noter-insert-note-no-questions t)
  ;; Keep the notes window focused after creating a note.
  (org-noter-always-focus-on-notes-buffer t)
  ;; Customize the note heading template.
  (org-noter-heading-application-function 'org-noter-insert-heading-at-point)
  (org-noter-note-heading-template "* %s\n:PROPERTIES:\n:NOTER_PAGE: %p\n:NOTER_LEFT: %l\n:NOTER_RIGHT: %r\n:END:\n\n")

  :config
  ;; Custom function to create a new notes file if one doesn't exist
  ;; or find the existing one and open it side-by-side.
  (defun ar/org-noter-find-or-create-notes ()
    "Find the notes for the current PDF or create a new notes file.
Opens the notes in a split window to the right."
    (interactive)
    (let ((pdf-path (buffer-file-name)))
      (unless pdf-path
        (error "Current buffer is not visiting a file"))
      (let* ((pdf-name (file-name-nondirectory pdf-path))
             (notes-file (expand-file-name (format "%s.org" (file-name-sans-extension pdf-name)) my/org-noter-directory)))
        (if (file-exists-p notes-file)
            (find-file notes-file)
          (progn
            (find-file notes-file)
            (insert (format "#+title: Notes on %s\n\n" pdf-name))))
        (delete-other-windows)
        (split-window-right)
        (windmove-right)
        (find-file pdf-path)))))
#+end_src

* Snippets
** Directory
#+begin_src emacs-lisp
;; This is the directory where you will store your personal snippets.
(defvar my/snippets-directory (expand-file-name "snippets" user-emacs-directory)
  "Directory for personal yasnippet snippets.")

;; Create the custom snippets directory if it doesn't exist.
(unless (file-directory-p my/snippets-directory)
  (make-directory my/snippets-directory t))
#+end_src

** Yasnippet-Snippets
*yasnippet-snippets* has to be loaded before *yasnippet* for user snippets to override the pre-built ones
#+begin_src emacs-lisp
(use-package yasnippet-snippets :ensure t :demand t)
#+end_src

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :hook (after-init . yas-global-mode)
  :custom
  (yas-prompt-functions '(yas-completing-prompt))
  :config

  ;; --- Add Personal Snippets Directory ---
  (add-to-list 'yas-snippet-dirs my/snippets-directory)
  (defun ar/yas-reload-snippets-on-save ()
    "Reload all snippets if a snippet file is being saved."
    (when (string-prefix-p my/snippets-directory (buffer-file-name))
      (yas-reload-all)
      (message "Yasnippet collection reloaded.")))

  (add-hook 'after-save-hook #'ar/yas-reload-snippets-on-save))
#+end_src

** Consult Integration
#+begin_src emacs-lisp
(use-package consult-yasnippet
  :ensure t
  :after (consult yasnippet)
  :config
  ;; You can customize the preview behavior if desired.
  (consult-customize consult-yasnippet :preview-key 'any))
#+end_src

** Cape Integration
*Disable in favor of lsp-bridge*
#+begin_src emacs-lisp
;; (use-package yasnippet-capf
;;   :ensure t
;;   :after cape
;;   :config
;;   (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src

#+RESULTS:

** Keybindings
#+begin_src emacs-lisp
(ar/global-leader
  "s" '(:ignore t :wk "snippets")
  "s i" '(consult-yasnippet :wk "insert snippet (consult)")
  "s n" '(yas-new-snippet :wk "new snippet")
  "s v" '(yas-visit-snippet-file :wk "visit snippet file"))
#+end_src

* LaTeX Writing Environment
** Core Backend: AUCTeX and Tectonic
This configures the foundational packages. *AUCTeX* is the primary editing environment, enhanced with *Tectonic* as the default compiler for its modern, all-in-one approach.
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :config
  ;; Set the default TeX engine to Tectonic.
  (setq TeX-engine 'tectonic)
  (add-to-list 'TeX-engine-alist
               '(tectonic "Tectonic" "tectonic -X compile %s -o %o" "tectonic -X compile %s -o %o" "tectonic -X compile %s -o %o"))

  ;; Add compilation and syntax checking commands
  (setq TeX-command-list
        (append TeX-command-list
                '(("Tectonic" "tectonic -X compile %s" TeX-run-command nil
                   (latex-mode) :help "Compile with Tectonic")
                  ("Tectonic Watch" "tectonic -X watch %s" TeX-run-command nil
                   (latex-mode) :help "Continuously compile with Tectonic")
                  ("ChkTeX" "chktex -v0 -q -I %s" TeX-run-compile nil
                   (latex-mode) :help "Check with ChkTeX")
                  ("Check" "lacheck %s" TeX-run-compile nil
                   (latex-mode) :help "Check with lacheck"))))

  ;; Use PDF-Tools as the default viewer and enable source correlation (SyncTeX).
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (setq TeX-source-correlate-mode t)
  (setq TeX-PDF-mode t)

  ;; Enable folding of macros and environments, which is built into AUCTeX.
  (add-hook 'latex-mode-hook #'tex-fold-mode)
  (setq tex-newline-function 'newline-and-indent)

  ;; indentation settings
  (setq latex-indent-level 2
        latex-item-indent 0
        tex-brace-indent-level 2))

;; Custom keybindings for syntax checking
(with-eval-after-load 'latex
  (define-key LaTeX-mode-map (kbd "C-c C-k")
              (lambda ()
                (interactive)
                (TeX-command "ChkTeX" 'TeX-master-file)))

  (define-key LaTeX-mode-map (kbd "C-c C-l")
              (lambda ()
                (interactive)
                (TeX-command "Check" 'TeX-master-file))))

;; Provides evil-mode integration for AUCTeX environments.
(use-package evil-tex
  :ensure t
  :after (tex evil)
  :defer t)
#+end_src

#+RESULTS:
: Ignoring ’:ensure t’ in ’evil-tex’ config

** LSP, Completion, and Diagnostics
This section integrates modern tooling for a responsive and intelligent editing experience.
- *Eglot + Texlab:* Provides Language Server Protocol features.
- *Completion:* Merges candidates from Eglot (LSP) and AUCTeX for the most comprehensive suggestions.
- *Flymake + ChkTeX:* Offers on-the-fly syntax and style checking.
#+begin_src emacs-lisp
;; Integrate texlab with Eglot for LSP support.
;; (with-eval-after-load 'eglot
;;   (add-to-list 'eglot-server-programs
;;                '((latex-mode tex-mode plain-tex-mode) . ("texlab"))))
;; 
;; ;; This function correctly merges AUCTeX's completion functions with the
;; ;; LSP-provided functions from Eglot. Cape and Corfu will display the merged list.
;; (defun ar/latex-completion-setup ()
;;   "Add AUCTeX completion backend to the local completion functions."
;;   (add-to-list 'completion-at-point-functions #'TeX-completion-at-point-function nil t))
;; (add-hook 'LaTeX-mode-hook #'ar/latex-completion-setup)
;; 
;; ;; Enable the built-in ChkTeX support from AUCTeX for style checking.
;; ;; This requires the `chktex` command-line tool to be installed.
;; (add-hook 'LaTeX-mode-hook
;;           (lambda ()
;;             (flymake-add-checker 'tex-chktex)))
#+end_src

** Auto-formatting: Apheleia and latexindent
This configures *apheleia* to use the *latexindent* tool for formatting, ensuring consistent and clean source code.
#+begin_src emacs-lisp
(with-eval-after-load 'apheleia
  ;; For standalone .tex files
  (setf (alist-get 'LaTeX-mode apheleia-mode-alist)
        '(latexindent))

  (setf (alist-get 'latexindent apheleia-formatters)
        '("latexindent" "-g" "/dev/null"))

  ;; For Org mode LaTeX source blocks
  (add-to-list 'apheleia-formatters
               '(latex . ("latexindent" "-g" "/dev/null")))

  ;; Enable in LaTeX buffers
  (add-hook 'LaTeX-mode-hook #'apheleia-mode))
#+end_src

** Citation Ecosystem: Citar and Zotero
This section configures a streamlined citation workflow centered around **Citar** and Zotero. It removes redundant packages for a simpler, more powerful setup.
#+begin_src emacs-lisp
(use-package citar
  :ensure t
  :custom
  ;; *** CRITICAL: Set your bibliography files ***
  (citar-bibliography '("~/path/to/references.bib"))  ;; CHANGE THIS
  (citar-library-paths '("~/Zotero/storage"))         ;; CHANGE THIS
  (citar-notes-paths '("~/org-roam/"))                ;; CHANGE THIS

  ;; Icons (requires nerd-icons or all-the-icons)
  (citar-symbols
   `((file ,(nerd-icons-mdicon "nf-md-file_document") . " ")
     (note ,(nerd-icons-mdicon "nf-md-note_text") . " ")
     (link ,(nerd-icons-mdicon "nf-md-link") . " ")))

  :hook
  ;; Note: NOT using capf setup since acm-enable-capf is disabled
  ;; Citar will still work via other mechanisms
  ((LaTeX-mode org-mode) . (lambda ()
                             ;; Citar keybindings available in these modes
                             (local-set-key (kbd "C-c b") #'citar-insert-citation))))

;; Citar-Embark for contextual actions
(use-package citar-embark
  :ensure t
  :after (citar embark)
  :config (citar-embark-mode))

;; Citar-Org-Roam integration
(use-package citar-org-roam
  :ensure t
  :after (citar org-roam)
  :config (citar-org-roam-mode 1))

;; RefTeX for non-citation references
(use-package reftex
  :after tex
  :config
  (add-hook 'LaTeX-mode-hook #'reftex-mode)
  (setq reftex-plug-into-AUCTeX t)
  ;; Let Citar handle bibliographies
  (setq reftex-default-bibliography '()))

#+end_src

** Writing UI and Editing Enhancements
This section improves the interactive writing experience with faster math input
and aesthetic ligatures.
#+begin_src emacs-lisp
(use-package cdlatex
  :ensure t
  :hook (LaTeX-mode . cdlatex-mode)
  :config
  ;; Customize cdlatex snippets
  (setq cdlatex-math-modify-alist
        '((?B "\\mathbb" nil t nil nil)
          (?C "\\mathcal" nil t nil nil)
          (?F "\\mathfrak" nil t nil nil))))

(use-package laas
  :ensure t
  :hook (LaTeX-mode . laas-mode)
  :config
  ;; Custom snippets for fast math typing
  (aas-set-snippets 'laas-mode
                    ;; Greek letters
                    ";a" "\\alpha"
                    ";b" "\\beta"
                    ";g" "\\gamma"
                    ";d" "\\delta"
                    ";e" "\\epsilon"
                    ";l" "\\lambda"
                    ";m" "\\mu"
                    ";p" "\\pi"
                    ";s" "\\sigma"
                    ";t" "\\theta"
                    ";o" "\\omega"
                    ;; Uppercase Greek
                    ";G" "\\Gamma"
                    ";D" "\\Delta"
                    ";L" "\\Lambda"
                    ";O" "\\Omega"
                    ;; Math operators
                    ";int" (lambda () (interactive)
                             (insert "\\int_{")
                             (laas-smart-position))
                    ";sum" (lambda () (interactive)
                             (insert "\\sum_{")
                             (laas-smart-position))
                    ";prod" (lambda () (interactive)
                              (insert "\\prod_{")
                              (laas-smart-position))
                    ;; Quick environments
                    ";eq" (lambda () (interactive)
                            (laas-wrap-previous-object "equation"))
                    ";ali" (lambda () (interactive)
                             (laas-wrap-previous-object "align"))))

(defun my/latex-prettify-symbols-setup ()
  "Enable prettify-symbols-mode with LaTeX ligatures."
  (prettify-symbols-mode 1)
  (setq prettify-symbols-alist
        '(("\\alpha" . "α")
          ("\\beta" . "β")
          ("\\gamma" . "γ")
          ("\\delta" . "δ")
          ("\\epsilon" . "ε")
          ("\\lambda" . "λ")
          ("\\mu" . "μ")
          ("\\pi" . "π")
          ("\\sigma" . "σ")
          ("\\phi" . "φ")
          ("\\theta" . "θ")
          ("\\omega" . "ω")
          ("\\sum" . "∑")
          ("\\int" . "∫")
          ("\\infty" . "∞")
          ("\\in" . "∈")
          ("\\subset" . "⊂")
          ("\\subseteq" . "⊆")
          ("\\rightarrow" . "→")
          ("\\Rightarrow" . "⇒")
          ("\\leftarrow" . "←")
          ("\\Leftarrow" . "⇐")
          ("\\leq" . "≤")
          ("\\geq" . "≥")
          ("\\neq" . "≠")
          ("\\times" . "×")
          ("\\cdot" . "·"))))

(add-hook 'LaTeX-mode-hook #'my/latex-prettify-symbols-setup)
#+end_src

** Org Mode Integration
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  ;; Enable LaTeX in org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(latex . t))

  ;; Use Citar for citations in Org
  (setq org-cite-global-bibliography citar-bibliography)
  (setq org-cite-follow-processor 'citar)
  (setq org-cite-activate-processor 'citar)
  (setq org-cite-insert-processor 'citar)

  ;; Use Tectonic for Org LaTeX exports
  (setq org-latex-compiler "tectonic")
  (setq org-latex-pdf-process '("tectonic -X compile %f"))

  ;; Custom LaTeX classes for Org export
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass[11pt,a4paper]{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) t)

  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass{beamer}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")) t))
#+end_src

** Custom Snippets for Scientific Writing
#+begin_src emacs-lisp
  (with-eval-after-load 'yasnippet
    (yas-define-snippets 'latex-mode
                         '(;; Environments
                           ("beg" "\\begin{${1:env}}\n  $0\n\\end{$1}" "begin-end")
                           ("eq" "\\begin{equation}\n  ${1:equation}\n  \\label{eq:${2:label}}\n\\end{equation}\n$0" "equation")
                           ("ali" "\\begin{align}\n  ${1:a} &= ${2:b} \\\\\\\\\n  ${3:c} &= ${4:d}\n  \\label{eq:${5:label}}\n\\end{align}\n$0" "align")
                           ("fig" "\\begin{figure}[htbp]\n  \\centering\n  \\includegraphics[width=${1:0.8}\\textwidth]{${2:path}}\n  \\caption{${3:caption}}\n  \\label{fig:${4:label}}\n\\end{figure}\n$0" "figure")
                           ("tab" "\\begin{table}[htbp]\n  \\centering\n  \\caption{${1:caption}}\n  \\label{tab:${2:label}}\n  \\begin{tabular}{${3:lll}}\n    \\toprule\n    ${4:header} \\\\\\\\\n    \\midrule\n    ${5:data} \\\\\\\\\n    \\bottomrule\n  \\end{tabular}\n\\end{table}\n$0" "table")

                           ;; Math
                           ("frac" "\\frac{${1:num}}{${2:denom}}$0" "fraction")
                           ("sum" "\\sum_{${1:i=1}}^{${2:n}} ${3:x_i}$0" "sum")
                           ("int" "\\int_{${1:a}}^{${2:b}} ${3:f(x)} \\, dx$0" "integral")
                           ("lim" "\\lim_{${1:x \\to \\infty}} ${2:f(x)}$0" "limit")

                           ;; Physics
                           ("pd" "\\frac{\\partial ${1:f}}{\\partial ${2:x}}$0" "partial derivative")
                           ("dd" "\\frac{d ${1:f}}{d ${2:x}}$0" "derivative")
                           ("vv" "\\vec{${1:v}}$0" "vector")

                           ;; Citations and references
                           ("cite" "\\cite{${1:key}}$0" "cite")
                           ("ref" "\\ref{${1:label}}$0" "reference")
                           ("eqref" "\\eqref{${1:eq:label}}$0" "equation reference"))))
#+end_src

** Keybindings
#+begin_src emacs-lisp
(with-eval-after-load 'latex
  ;; Compilation
  (define-key LaTeX-mode-map (kbd "C-c c") #'TeX-command-master)
  (define-key LaTeX-mode-map (kbd "C-c v") #'TeX-view)

  ;; Syntax checking (compilation buffer approach)
  (define-key LaTeX-mode-map (kbd "C-c C-k")
              (lambda () (interactive) (TeX-command "ChkTeX" 'TeX-master-file)))
  (define-key LaTeX-mode-map (kbd "C-c C-l")
              (lambda () (interactive) (TeX-command "Check" 'TeX-master-file)))

  ;; Citations
  (define-key LaTeX-mode-map (kbd "C-c b") #'citar-insert-citation)
  (define-key LaTeX-mode-map (kbd "C-c o") #'citar-open)

  ;; LSP features (provided by lsp-bridge)
  (define-key LaTeX-mode-map (kbd "C-c d") #'lsp-bridge-find-def)
  (define-key LaTeX-mode-map (kbd "C-c r") #'lsp-bridge-find-references)
  (define-key LaTeX-mode-map (kbd "C-c h") #'lsp-bridge-show-documentation))
#+end_src

* Markdown/Org Conversion
** md-to-org
#+begin_src emacs-lisp
;; <
(defun md-to-org (md-file &optional org-file)
  "Convert a Markdown file to Org mode format using pandoc.
MD-FILE is the input Markdown file path.
ORG-FILE is the optional output Org file path. If not provided,
it will use the same name as MD-FILE but with .org extension."
  (interactive "fMarkdown file: ")
  (let* ((input-file (expand-file-name md-file))
         (output-file (or org-file
                         (concat (file-name-sans-extension input-file) ".org")))
         (pandoc-cmd (format "pandoc -f markdown -t org %s -o %s"
                            (shell-quote-argument input-file)
                            (shell-quote-argument output-file))))
    (unless (executable-find "pandoc")
      (error "Pandoc not found. Please install pandoc to use this function"))
    (unless (file-exists-p input-file)
      (error "Input file does not exist: %s" input-file))
    (when (file-exists-p output-file)
      (unless (y-or-n-p "Output file exists. Overwrite? ")
        (error "Conversion cancelled")))
    (message "Converting %s to %s..." input-file output-file)
    (let ((result (shell-command pandoc-cmd)))
      (if (= result 0)
          (progn
            (message "Successfully converted to %s" output-file)
            (when (y-or-n-p "Open the converted file? ")
              (find-file output-file)))
        (error "Pandoc conversion failed with exit code %d" result)))))

(defun md-to-org-current-buffer ()
  "Convert the current Markdown buffer to Org mode format.
Saves the current buffer first if modified, then converts it."
  (interactive)
  (unless (buffer-file-name)
    (error "Buffer is not associated with a file"))
  (when (buffer-modified-p)
    (if (y-or-n-p "Buffer modified. Save before converting? ")
        (save-buffer)
      (error "Please save the buffer before converting")))
  (md-to-org (buffer-file-name)))

(defun md-to-org-region (start end)
  "Convert the selected region from Markdown to Org mode format using pandoc.
START and END define the region boundaries.
The converted text replaces the original region."
  (interactive "r")
  (unless (executable-find "pandoc")
    (error "Pandoc not found. Please install pandoc to use this function"))
  (unless (use-region-p)
    (error "No region selected"))
  (when (= start end)
    (error "Empty region selected"))

  (let* ((md-text (buffer-substring-no-properties start end))
         (temp-md-file (make-temp-file "md-to-org-" nil ".md"))
         (temp-org-file (make-temp-file "md-to-org-" nil ".org"))
         (pandoc-cmd (format "pandoc -f markdown -t org %s -o %s"
                            (shell-quote-argument temp-md-file)
                            (shell-quote-argument temp-org-file))))
    (unwind-protect
        (progn
          ;; Write markdown text to temp file with proper encoding
          (with-temp-file temp-md-file
            (insert md-text))
          ;; Convert using pandoc
          (let ((result (shell-command pandoc-cmd)))
            (if (= result 0)
                (if (file-exists-p temp-org-file)
                    (let ((org-text (with-temp-buffer
                                     (insert-file-contents temp-org-file)
                                     (buffer-string))))
                      ;; Remove trailing newline if original text didn't have one
                      (when (and (> (length org-text) 0)
                                 (not (string-suffix-p "\n" md-text))
                                 (string-suffix-p "\n" org-text))
                        (setq org-text (substring org-text 0 -1)))
                      ;; Replace the region
                      (save-excursion
                        (delete-region start end)
                        (goto-char start)
                        (insert org-text))
                      (message "Region converted from Markdown to Org mode"))
                  (error "Pandoc output file not created"))
              (error "Pandoc conversion failed with exit code %d" result))))
      ;; Clean up temp files
      (when (file-exists-p temp-md-file)
        (delete-file temp-md-file))
      (when (file-exists-p temp-org-file)
        (delete-file temp-org-file)))))

(defun md-to-org-region-to-new-buffer (start end)
  "Convert the selected region from Markdown to Org mode and show in new buffer.
START and END define the region boundaries.
Creates a new buffer with the converted content instead of replacing the region."
  (interactive "r")
  (unless (executable-find "pandoc")
    (error "Pandoc not found. Please install pandoc to use this function"))
  (unless (use-region-p)
    (error "No region selected"))
  (when (= start end)
    (error "Empty region selected"))

  (let* ((md-text (buffer-substring-no-properties start end))
         (temp-md-file (make-temp-file "md-to-org-" nil ".md"))
         (temp-org-file (make-temp-file "md-to-org-" nil ".org"))
         (pandoc-cmd (format "pandoc -f markdown -t org %s -o %s"
                            (shell-quote-argument temp-md-file)
                            (shell-quote-argument temp-org-file))))
    (unwind-protect
        (progn
          ;; Write markdown text to temp file
          (with-temp-file temp-md-file
            (insert md-text))
          ;; Convert using pandoc
          (let ((result (shell-command pandoc-cmd)))
            (if (= result 0)
                (if (file-exists-p temp-org-file)
                    (let ((org-text (with-temp-buffer
                                     (insert-file-contents temp-org-file)
                                     (buffer-string))))
                      ;; Create new buffer with converted content
                      (with-current-buffer (get-buffer-create "*Markdown to Org Conversion*")
                        (erase-buffer)
                        (insert org-text)
                        (org-mode)
                        (goto-char (point-min))
                        (display-buffer (current-buffer)))
                      (message "Converted text displayed in new buffer"))
                  (error "Pandoc output file not created"))
              (error "Pandoc conversion failed with exit code %d" result))))
      ;; Clean up temp files
      (when (file-exists-p temp-md-file)
        (delete-file temp-md-file))
      (when (file-exists-p temp-org-file)
        (delete-file temp-org-file)))))
#+end_src

** org-to-md

#+begin_src emacs-lisp
;; --- Org to Markdown Conversion ---
;; <
(defun org-to-md (org-file &optional md-file)
  "Convert an Org mode file to Markdown format using pandoc.
ORG-FILE is the input Org file path.
MD-FILE is the optional output Markdown file path. If not provided,
it will use the same name as ORG-FILE but with .md extension."
  (interactive "fOrg file: ")
  (let* ((input-file (expand-file-name org-file))
         (output-file (or md-file
                         (concat (file-name-sans-extension input-file) ".md")))
         (pandoc-cmd (format "pandoc -f org -t markdown %s -o %s"
                            (shell-quote-argument input-file)
                            (shell-quote-argument output-file))))
    (unless (executable-find "pandoc")
      (error "Pandoc not found. Please install pandoc to use this function"))
    (unless (file-exists-p input-file)
      (error "Input file does not exist: %s" input-file))
    (when (file-exists-p output-file)
      (unless (y-or-n-p "Output file exists. Overwrite? ")
        (error "Conversion cancelled")))
    (message "Converting %s to %s..." input-file output-file)
    (let ((result (shell-command pandoc-cmd)))
      (if (= result 0)
          (progn
            (message "Successfully converted to %s" output-file)
            (when (y-or-n-p "Open the converted file? ")
              (find-file output-file)))
        (error "Pandoc conversion failed with exit code %d" result)))))

(defun org-to-md-current-buffer ()
  "Convert the current Org buffer to Markdown format.
Saves the current buffer first if modified, then converts it."
  (interactive)
  (unless (buffer-file-name)
    (error "Buffer is not associated with a file"))
  (when (buffer-modified-p)
    (if (y-or-n-p "Buffer modified. Save before converting? ")
        (save-buffer)
      (error "Please save the buffer before converting")))
  (org-to-md (buffer-file-name)))

(defun org-to-md-region (start end)
  "Convert the selected region from Org mode to Markdown format using pandoc.
START and END define the region boundaries.
The converted text replaces the original region."
  (interactive "r")
  (unless (executable-find "pandoc")
    (error "Pandoc not found. Please install pandoc to use this function"))
  (unless (use-region-p)
    (error "No region selected"))
  (when (= start end)
    (error "Empty region selected"))
    ;; <
  (let* ((org-text (buffer-substring-no-properties start end))
         (temp-org-file (make-temp-file "org-to-md-" nil ".org"))
         (temp-md-file (make-temp-file "org-to-md-" nil ".md"))
         (pandoc-cmd (format "pandoc -f org -t markdown %s -o %s"
                            (shell-quote-argument temp-org-file)
                            (shell-quote-argument temp-md-file))))
    (unwind-protect
        (progn
          ;; Write org text to temp file with proper encoding
          (with-temp-file temp-org-file
            (insert org-text))
          ;; Convert using pandoc
          (let ((result (shell-command pandoc-cmd)))
            (if (= result 0)
                (if (file-exists-p temp-md-file)
                    (let ((md-text (with-temp-buffer
                                     (insert-file-contents temp-md-file)
                                     (buffer-string))))
                      ;; Remove trailing newline if original text didn't have one
                      (when (and (> (length md-text) 0)
                                 (not (string-suffix-p "\n" org-text))
                                 (string-suffix-p "\n" md-text))
                        (setq md-text (substring md-text 0 -1)))
                      ;; Replace the region
                      (save-excursion
                        (delete-region start end)
                        (goto-char start)
                        (insert md-text))
                      (message "Region converted from Org mode to Markdown"))
                  (error "Pandoc output file not created"))
              (error "Pandoc conversion failed with exit code %d" result))))
      ;; Clean up temp files
      (when (file-exists-p temp-org-file)
        (delete-file temp-org-file))
      (when (file-exists-p temp-md-file)
        (delete-file temp-md-file)))))

(defun org-to-md-region-to-new-buffer (start end)
  "Convert the selected region from Org to Markdown and show in new buffer.
START and END define the region boundaries.
Creates a new buffer with the converted content instead of replacing the region."
  (interactive "r")
  (unless (executable-find "pandoc")
    (error "Pandoc not found. Please install pandoc to use this function"))
  (unless (use-region-p)
    (error "No region selected"))
  (when (= start end)
    (error "Empty region selected"))

  (let* ((org-text (buffer-substring-no-properties start end))
         (temp-org-file (make-temp-file "org-to-md-" nil ".org"))
         (temp-md-file (make-temp-file "org-to-md-" nil ".md"))
         (pandoc-cmd (format "pandoc -f org -t markdown %s -o %s"
                            (shell-quote-argument temp-org-file)
                            (shell-quote-argument temp-md-file))))
    (unwind-protect
        (progn
          ;; Write org text to temp file
          (with-temp-file temp-org-file
            (insert org-text))
          ;; Convert using pandoc
          (let ((result (shell-command pandoc-cmd)))
            (if (= result 0)
                (if (file-exists-p temp-md-file)
                    (let ((md-text (with-temp-buffer
                                     (insert-file-contents temp-md-file)
                                     (buffer-string))))
                      ;; Create new buffer with converted content
                      (with-current-buffer (get-buffer-create "*Org to Markdown Conversion*")
                        (erase-buffer)
                        (insert md-text)
                        (gfm-mode) ; Use gfm-mode for Markdown
                        (goto-char (point-min))
                        (display-buffer (current-buffer)))
                      (message "Converted text displayed in new buffer"))
                  (error "Pandoc output file not created"))
              (error "Pandoc conversion failed with exit code %d" result))))
      ;; Clean up temp files
      (when (file-exists-p temp-org-file)
        (delete-file temp-org-file))
      (when (file-exists-p temp-md-file)
        (delete-file temp-md-file)))))
#+end_src

* Miscelleanous
** Suppress Warnings
Disable annoying warnings that don't affect functionality.
#+begin_src emacs-lisp
;; Suppress org-element warnings in non-org buffers
(setq warning-suppress-types '((org-element)))
#+end_src
    
** Automatic Indentation with Dtrt-Indent
This package automatically detects and applies the correct indentation style
(tabs vs. spaces, indent width) for a file when you open it. It "Does The Right Thing" without manual configuration.
#+begin_src emacs-lisp
(use-package dtrt-indent
  :ensure t
  :hook (after-init . dtrt-indent-mode))
#+end_src

** Whitespace Cleanup on Save
This package automatically removes trailing whitespace and ensures a final
newline before you save a file, helping to keep your code and documents clean. It is configured to run only in programming and text modes to avoid corrupting files in special modes like Dired.
#+begin_src emacs-lisp
(use-package whitespace-cleanup-mode
  :ensure t
  ;; Enable this mode only for programming and text-based files,
  ;; which is a safe and effective default.
  :hook ((prog-mode . whitespace-cleanup-mode)
         (org-mode . whitespace-cleanup-mode)
         (text-mode . whitespace-cleanup-mode))
  :custom
  ;; A list of major modes where whitespace cleanup should NOT be performed.
  ;; This is critical for modes where whitespace is significant and managed
  ;; by the mode itself (e.g., dired, magit).
  (whitespace-cleanup-mode-except-modes
   '(dired-mode
     magit-status-mode
     compilation-mode
     vterm-mode)))
#+end_src

** Gnuplot Integration
This provides a full-featured environment for creating and executing Gnuplot scripts, as well as enabling Gnuplot source blocks in Org mode.
#+begin_src emacs-lisp
(use-package gnuplot
  :ensure t
  :mode (("\\.gp\\'" . gnuplot-mode)
         ("\\.gnuplot\\'" . gnuplot-mode))
  :custom
  ;; Tell Emacs where to find the gnuplot executable.
  ;; This should be in your PATH if installed via home-manager.
  (gnuplot-program "gnuplot")

  ;; Set the default terminal for interactive plotting. 'qt' is a modern,
  ;; interactive default. Other options include 'wxt', 'x11', or file-based
  ;; terminals like 'pngcairo' or 'svg'.
  (gnuplot-default-term 'pdfcairo))
#+end_src
