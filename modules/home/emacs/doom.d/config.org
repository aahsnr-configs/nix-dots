#+TITLE: Doom Emacs Configuration
#+AUTHOR: Ahsanur Rahman
#+PROPERTY: header-args:emacs-lisp

* Core Emacs & User Configuration
This section sets up fundamental user information and core Emacs behavior. These settings provide a baseline for a stable and personalized experience.

#+begin_src emacs-lisp
(setq user-full-name "Ahsanur Rahman"
      user-mail-address "ahsanur041@proton.me")

;; Improve scrolling behavior
(setq scroll-error-top-bottom t
      scroll-conservatively 120
      scroll-margin 0)

;; Prefer vertical splits over horizontal ones.
(setq split-width-threshold 170
      split-height-threshold nil)

;; Set default indentation.
(setq-default indent-tabs-mode nil
              tab-width 2
              fill-column 80)

;; Frame Title Formatting
(setq-default frame-title-format
              '(:eval (if (buffer-file-name)
                          (format "[%s] - %s"
                                  (file-name-nondirectory (buffer-file-name))
                                  (system-name))
                        (format "[%s] - %s"
                                (buffer-name)
                                (system-name)))))

;; Mitigate performance issues on Wayland/PGTK builds
;; (when (fboundp 'pgtk-use-im-context)
;;   (add-hook 'after-make-frame-functions
;;             (lambda (frame)
;;               (with-selected-frame frame
;;                 (pgtk-use-im-context nil)))))
#+end_src

* UI & Theming
This section configures the entire visual experience, from the color theme and fonts to the modeline and line numbers.

#+begin_src emacs-lisp
(use-package! doom-themes
  :defer t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-themes-treemacs-theme "doom-tokyo-night")
  :config
  (load-theme 'doom-tokyo-night t)
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config)
  ;; Set distinct colors for bold and italic
  (custom-set-faces
   '(bold ((t (:foreground "#7aa2f7" :weight bold))))
   '(italic ((t (:foreground "#bb9af7" :slant italic))))))

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 26.0)
      doom-symbol-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5))

(setq-default line-spacing 0.02)

(add-hook! 'doom-after-init-hook
  (defun +my/setup-font-faces ()
    (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)))

(after! which-key
  (setq which-key-idle-delay 0.1
        which-key-separator " → "
        which-key-popup-type 'minibuffer)
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . " \\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . " \\1"))))

(after! doom-modeline
  (setq doom-modeline-height 28
        doom-modeline-bar-width 3
        doom-modeline-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-buffer-file-name-style 'relative
        doom-modeline-vcs-max-length 12
        doom-modeline-env-version t))

;; Enable line numbers for programming modes
(add-hook! '(prog-mode-hook conf-mode-hook) #'display-line-numbers-mode)
;; Disable line numbers for other modes
(add-hook! '(org-mode-hook term-mode-hook shell-mode-hook eshell-mode-hook)
           #'(lambda () (display-line-numbers-mode -1)))

(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  (custom-set-faces
   `(rainbow-delimiters-depth-1-face ((t (:foreground ,(doom-color 'blue)))))
   `(rainbow-delimiters-depth-2-face ((t (:foreground ,(doom-color 'magenta)))))
   `(rainbow-delimiters-depth-3-face ((t (:foreground ,(doom-color 'yellow)))))
   `(rainbow-delimiters-depth-4-face ((t (:foreground ,(doom-color 'cyan)))))
   `(rainbow-delimiters-depth-5-face ((t (:foreground ,(doom-color 'red)))))
   `(rainbow-delimiters-depth-6-face ((t (:foreground ,(doom-color 'green)))))
   `(rainbow-delimiters-depth-7-face ((t (:foreground ,(doom-color 'orange)))))))
#+end_src

* Evil (Vim Emulation)
These settings customize Evil mode to better suit the workflow, including cursor appearance, escape behavior, and keybindings. Most evil extensions are omitted, as Doom provides excellent defaults.

#+begin_src emacs-lisp
(setq evil-v$-excludes-newline t
      evil-search-wrap nil
      evil-move-beyond-eol t
      evil-want-Y-yank-to-eol t)

;; Use doom-tokyo-night colors for cursors
(setq evil-normal-state-cursor `(box ,(doom-color 'orange))
      evil-insert-state-cursor `(bar ,(doom-color 'red))
      evil-visual-state-cursor `(hollow ,(doom-color 'orange)))

(after! evil-escape
  (setq evil-escape-key-sequence "jk"
        evil-escape-delay 0.2
        evil-escape-excluded-modes '(dired-mode)))

(after! evil-goggles
  (setq evil-goggles-duration 0.1))

(map! :map evil-normal-state-map
      "j" #'evil-next-visual-line
      "k" #'evil-previous-visual-line
      "g c" #'evilnc-comment-or-uncomment-lines)
(map! :map evil-visual-state-map
      "g c" #'evilnc-comment-or-uncomment-lines)
#+end_src

* Completion Framework
This section configures the Vertico/Corfu completion UI, ensuring a fast and responsive experience.

#+begin_src emacs-lisp
(after! vertico
  (setq vertico-count 10))

(after! corfu
  (setq corfu-auto-resize nil
        corfu-auto-delay 0.1))
#+end_src

* Project & File Management
This section configures tools for managing projects, buffers, and files, including Dired (the file manager) and Ibuffer (the buffer list).

#+begin_src emacs-lisp
;; Automatically clean up inactive buffers to reduce clutter.
(use-package! buffer-terminator
  :custom
  (buffer-terminator-verbose nil)
  (buffer-terminator-inactivity-timeout (* 30 60)) ; 30 minutes
  (buffer-terminator-interval (* 10 60)) ; 10 minutes
  :config
  (buffer-terminator-mode 1))

;; An enhanced help interface.
(use-package! helpful
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-function] . helpful-callable)
  ([remap describe-key] . helpful-key)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  :custom
  (helpful-max-buffers 7))

;; Writable grep buffers.
(use-package! wgrep
  :config
  (setq wgrep-auto-save-buffer t))

;; Configuration for the Vterm terminal emulator.
(setq vterm-kill-buffer-on-exit t)
(defun +my/vterm-force-kill-current-buffer ()
  (interactive)
  (when (eq major-mode 'vterm-mode)
    (kill-buffer (current-buffer) t)
    (message "Vterm buffer killed forcefully.")))

(map! :leader
      :desc "Toggle vterm locally"  "v t" #'+vterm/toggle
      :desc "Open vterm buffer locally" "v T" #'+vterm/here
      :desc "Force kill current vterm buffer" "o k" #'+my/vterm-force-kill-current-buffer)

;; Ibuffer configuration for project-based buffer grouping.
(use-package! nerd-icons-ibuffer :after ibuffer)
(after! ibuffer
  (setq ibuffer-never-show-regexps
        '("\\` " "\\*dashboard\\*$" "\\*scratch\\*$" "\\*Messages\\*$"
          "\\*Help\\*$" "\\*Backtrace\\*$" "\\*Compile-Log\\*$"
          "\\*Flymake diagnostics" "\\*eglot-events\\*$" "\\*Embark Collect"
          "\\*vterm\\*"))
  (setq ibuffer-formats
        '((mark modified read-only " "
           (icon 4 4 :left :elide) (name 35 35 :left :elide) " "
           (size-h 9 9 :right :elide) " "
           (mode 16 16 :left :elide) " "
           filename-and-process)))

  (defun ar/ibuffer-set-project-groups ()
    "Create and set ibuffer filter groups based on known projects."
    (let ((groups '()))
      (when (fboundp 'projectile-project-p)
        (dolist (proj (projectile-relevant-known-projects))
          (let* ((proj-name (projectile-project-name proj))
                 (proj-root (projectile-project-root proj)))
            (push `(,proj-name (:eval (and (buffer-file-name)
                                           (string-prefix-p proj-root (buffer-file-name)))))
                  groups)))
        (push '("Miscellaneous" (:predicate (lambda (buf)
                                              (and (buffer-file-name buf)
                                                   (not (projectile-project-p (buffer-file-name buf)))))))
              groups)
        (setq ibuffer-filter-groups (nreverse groups)))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (nerd-icons-ibuffer-mode)
              (ar/ibuffer-set-project-groups)
              (ibuffer-do-sort-by-last-access-time)
              (ibuffer-update nil t))))

;; Dired (file manager) enhancements.
(use-package! dired-open
  :config
  (setq dired-open-extensions '(("png" . "imv") ("mp4" . "mpv"))))
(use-package! dired-git-info)
(use-package! dired-ranger
  :after dired
  :config
  (map! :map dired-mode-map
        "y" #'dired-ranger-copy
        "p" #'dired-ranger-paste
        "x" #'dired-ranger-move))

(after! dired
  (setq dired-listing-switches "-agho --group-directories-first"
        dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$"
        dired-auto-revert-buffer t
        dired-dwim-target t
        dired-recursive-deletes 'always
        dired-recursive-copies 'always)
  (add-hook 'dired-mode-hook 'dired-hide-dotfiles-mode)
  (add-hook 'dired-mode-hook 'dired-git-info-mode)
  (map! :map dired-mode-map
        "h" #'dired-up-directory
        "l" #'dired-find-file-other-window
        "G" #'dired-goto-file
        "^" #'dired-goto-root-directory
        "~" #'dired-home
        "i" #'dired-maybe-insert-subdir
        "C-n" #'dired-create-file
        "C-d" #'dired-create-directory
        "R" #'dired-do-rename
        "X" #'dired-open-file))

#+end_src

* Development Environment
This section configures the core IDE features: Eglot for code intelligence, DApE for debugging, Flymake for linting, and Doom's native formatter.

** Linting, Formatting, and Tree-sitter
#+begin_src emacs-lisp
(use-package! treesit-fold
  :hook (prog-mode . treesit-fold-mode))

;; Configure evil-textobj-tree-sitter for advanced, syntax-aware text objects.
(use-package! evil-textobj-tree-sitter
  :after evil
  :config
  (map! :map evil-normal-state-map
        "]f" #'(lambda () (interactive) (evil-textobj-tree-sitter-goto-textobj "function.outer"))
        "[f" #'(lambda () (interactive) (evil-textobj-tree-sitter-goto-textobj "function.outer" t))
        "]F" #'(lambda () (interactive) (evil-textobj-tree-sitter-goto-textobj "function.outer" nil t))
        "[F" #'(lambda () (interactive) (evil-textobj-tree-sitter-goto-textobj "function.outer" t t))))

;; This is the centralized, idiomatic Doom way to configure auto-formatters.
(set-formatter! 'ruff '("ruff" "format" "-"))
(set-formatter! 'latexindent '("latexindent" "-g" "/dev/null"))
(set-formatter! 'prettier '("prettier" "--prose-wrap" "always"))
#+end_src

** Eglot (LSP), Eldoc, and Flymake
#+begin_src emacs-lisp
(use-package! eldoc-box
  :hook (eglot-managed-mode . eldoc-box-hover-at-point-mode))

;; General flymake configuration
(after! flymake
  (setq flymake-log-level 2)
  (map! :map flymake-mode-map
        :leader
        :prefix ("e" . "errors")
        "l" #'flymake-show-buffer-diagnostics
        "n" #'flymake-goto-next-error
        "p" #'flymake-goto-prev-error))
#+end_src

** Language: Python
This section provides a complete IDE experience for Python, including LSP, debugging, and a comprehensive linting setup.

#+begin_src emacs-lisp
#+end_src

** Language: Jupyter
This configures Org mode's integration with Jupyter notebooks for interactive Python sessions.

#+begin_src emacs-lisp
(after! jupyter
  (setq jupyter-python-set-repl-for-current-buffer t
        jupyter-favorite-kernels '("python3")
        jupyter-repl-echo-evaluating-p nil
        jupyter-org-get-client-on-load t)
  (advice-add 'jupyter-org-interaction-mode :after
              (lambda () (evil-insert-state))))

(after! ob-jupyter
  (org-babel-do-load-languages 'org-babel-load-languages '((jupyter . t)))
  (org-babel-jupyter-override-src-block "python")
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src

** Language: Org Mode
This is the heart of the configuration for Org mode, setting up everything from file paths and appearance to task management and Roam.

#+begin_src emacs-lisp
(defvar my/org-directory "~/org/" "Base directory for all org files.")
(defvar my/org-roam-directory (expand-file-name "roam/" my/org-directory) "Directory for org-roam files.")

(defun ar/find-org-projects ()
  "Return a list of all Org files with a 'project' tag for capture."
  (let* ((builder (consult--grep-builder
                   (list consult-ripgrep-args
                         "--files-with-matches"
                         "--glob=*.org"
                         "^#\\+filetags:.*:project:.*"
                         (expand-file-name my/org-directory)))))
    (mapcar (lambda (file)
              (list (file-name-nondirectory file) file))
            (consult--grep-sync builder))))

(defun ar/org-font-setup ()
  (dolist (face '((org-level-1 . 1.2) (org-level-2 . 1.1) (org-level-3 . 1.05)
                  (org-level-4 . 1.0) (org-level-5 . 1.1) (org-level-6 . 1.1)
                  (org-level-7 . 1.1) (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "JetBrainsMono Nerd Font" :weight 'bold :height (cdr face) :slant 'unspecified))
  (set-face-attribute 'org-tag nil :foreground nil :inherit '(shadow fixed-pitch) :weight 'bold)
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(defun ar/org-setup-hook ()
  "Modes to enable on org-mode start"
  (org-indent-mode)
  (visual-line-mode 1)
  (ar/org-font-setup))

(after! org
  (setq org-directory my/org-directory
        org-agenda-files '("~/org/inbox.org" "~/org/projects.org" "~/org/habits.org" "~/org/goals.org")
        org-default-notes-file (expand-file-name "inbox.org" my/org-directory)
        org-startup-with-inline-images t
        org-image-actual-width 600
        org-archive-location (concat (file-name-as-directory (expand-file-name "archive" my/org-directory)) "Archive_%s::")
        org-auto-align-tags nil
        org-hide-emphasis-markers t)
  (add-hook! org-mode #'ar/org-setup-hook))

(use-package! org-tempo
  :after org
  :config
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))

(setf (alist-get 'height +org-capture-frame-parameters) 15)

(after! org
  (setq org-todo-keywords
        '((sequence "📥 TODO(t)" "⚡ NEXT(n)" "⚙️ PROG(p)" "⏳ WAIT(w@/!)" "|" "✅ DONE(d!)" "❌ CANCEL(c@)")
          (sequence "📝 PLAN(P)" "🚀 ACTIVE(A)" "⏸️ PAUSED(x)" "|" "🏆 ACHIEVED(a)" "🗑️ DROPPED(D)")))
  (setq org-todo-keyword-faces
        `(("📥 TODO" . (:foreground ,(doom-color 'red) :weight bold))
          ("⚡ NEXT" . (:foreground ,(doom-color 'orange) :weight bold))
          ("⚙️ PROG" . (:foreground ,(doom-color 'blue) :weight bold))
          ("⏳ WAIT" . (:foreground ,(doom-color 'yellow) :weight bold))
          ("✅ DONE" . (:foreground ,(doom-color 'green) :weight bold))
          ("❌ CANCEL" . (:foreground ,(doom-color 'comment) :weight bold))
          ("📝 PLAN" . (:foreground ,(doom-color 'cyan) :weight bold))
          ("🚀 ACTIVE" . (:foreground ,(doom-color 'magenta) :weight bold))
          ("⏸️ PAUSED" . (:foreground ,(doom-color 'fg) :weight bold))
          ("🏆 ACHIEVED" . (:foreground ,(doom-color 'green) :weight bold))
          ("🗑️ DROPPED" . (:foreground ,(doom-color 'comment) :weight bold)))))

(after! org-modern
  (setq org-modern-star '("◉" "○" "◈" "◇" "◆" "▷")
        org-modern-hide-stars "· "
        org-modern-list '((43 . "➤") (45 . "–") (42 . "•"))
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.1
        org-modern-block-name '(("src" "»" "«") ("example" "»" "«") ("quote" "❝" "❞"))
        org-modern-tag-faces `((:foreground ,(face-attribute 'default :foreground) :weight bold :box (:line-width (1 . -1) :color "#45475a")))
        org-modern-checkbox '((todo . "☐") (done . "☑") (cancel . "☒") (priority . "⚑") (on . "◉") (off . "○"))))

(after! org-appear
  (setq org-appear-autoemphasis t
        org-appear-autolinks t
        org-appear-autosubmarkers t))

(use-package! org-fragtog :hook (org-mode . org-fragtog-mode))

(after! org-capture
  (setq org-capture-templates
        '(("t" "📥 Task" entry (file+headline "~/org/inbox.org" "Tasks")
           "* 📥 TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n")
          ("n" "📝 Note" entry (file+headline "~/org/inbox.org" "Notes")
           "* %? :note:\n  :PROPERTIES:\n  :CREATED: %U\n  :SOURCE: \n  :END:\n")
          ("j" "📔 Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %U %?\n")
          ("m" "🤝 Meeting" entry (file+headline "~/org/inbox.org" "Meetings")
           "* Meeting: %? :meeting:\n  :PROPERTIES:\n  :CREATED: %U\n  :ATTENDEES: \n  :END:\n** Agenda\n** Notes\n** Action Items\n")
          ("p" "📝 Project" entry (file+headline "~/org/projects.org" "Projects")
           "* 📝 PLAN %? :project:\n  :PROPERTIES:\n  :CREATED: %U\n  :GOAL: \n  :DEADLINE: \n  :END:\n** Goals\n** Tasks\n*** 📥 TODO Define project scope\n** Resources\n** Notes\n")
          ("P" "📌 Project Task" entry
           (file (lambda ()
                   (let* ((project-list (ar/find-org-projects))
                          (project-name (completing-read "Select Project: " project-list)))
                     (cdr (assoc project-name project-list)))))
           "* 📥 TODO %?\n  :PROPERTIES:\n  :CREATED: %U\n  :END:\n"
           :prepend t
           :headline "Tasks")
          ("b" "📚 Book" entry (file+headline "~/org/reading.org" "Reading List")
           "* %? :book:read:\n  :PROPERTIES:\n  :CREATED: %U\n  :AUTHOR: \n  :GENRE: \n  :PAGES: \n  :STARTED: \n  :FINISHED: \n  :RATING: \n  :END:\n** Summary\n** Key Takeaways\n** Quotes\n")
          ("h" "🔄 Habit" entry (file+headline "~/org/habits.org" "Habits")
           "* 📥 TODO %? :habit:\n  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")\n  :PROPERTIES:\n  :CREATED: %U\n  :STYLE: habit\n  :END:\n")
          ("g" "🎯 Goal" entry (file+headline "~/org/goals.org" "Goals")
           "* 🎯 GOAL %? :goal:\n  DEADLINE: %(org-read-date nil nil \"+1y\")\n  :PROPERTIES:\n  :CREATED: %U\n  :TYPE: \n  :END:\n** Why this goal?\n** Success criteria\n** Action steps\n*** 📥 TODO Break down into smaller tasks\n** Resources needed\n** Potential obstacles\n** Progress tracking\n"))))

(after! org-roam
  (setq org-roam-directory my/org-roam-directory
        org-roam-db-location (expand-file-name ".org-roam.db" org-roam-directory)
        org-roam-node-display-template (concat "${title:*} " (propertize "${tags:20}" 'face 'org-tag))
        org-roam-capture-templates
        '(("d" "default" plain "* %?"
           :target (file+head "${slug}.org"
                              "#+title: ${title}\n#+filetags: \n\n")
           :unnarrowed t)
          ("p" "project" plain "* Goal\n\n%?\n\n* Tasks\n\n* Notes\n\n* Log\n"
           :target (file+head "projects/${slug}.org"
                              "#+title: Project: ${title}\n#+filetags: project\n")
           :unnarrowed t)
          ("l" "literature note" plain "* Source\n  - Author: \n  - Title: \n  - Year: \n\n* Summary\n\n%?\n\n* Key Takeaways\n\n* Quotes\n"
           :target (file+head "literature/${slug}.org"
                              "#+title: ${title}\n#+filetags: literature\n")
           :unnarrowed t)
          ("i" "idea" plain "* %?"
           :target (file+head "ideas/${slug}.org"
                              "#+title: ${title}\n#+filetags: idea fleeting\n")
           :unnarrowed t)
          ("z" "zettel" plain "* %?\n\n* References\n\n"
           :target (file+head "zettel/${slug}.org"
                              "#+title: ${title}\n#+filetags: zettel permanent\n")
           :unnarrowed t)
          ("j" "journal" plain "* Log\n\n%?"
           :target (file+olp+datetree (expand-file-name "journal.org" my/org-roam-directory))
           :unnarrowed t)))
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer))))

(use-package! org-roam-ui
  :after org-roam
  :commands org-roam-ui-mode3
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil))

(use-package! consult-org-roam
  :after (consult org-roam)
  :config (consult-org-roam-mode 1))

(use-package! org-super-agenda
  :hook (org-agenda-mode . org-super-agenda-mode)
  :config
  (setq org-super-agenda-groups
        '((:name "🔥 Overdue" :deadline past)
          (:name "📅 Today" :time-grid t :scheduled today)
          (:name "⚡ Next" :todo "⚡ NEXT")
          (:name "🔥 Important" :priority "A")
          (:name "🚀 Active Projects" :tag "project" :todo "ACTIVE")
          (:name "🎯 Goals" :tag "goal")
          (:name "🔄 Habits" :tag "habit")
          (:name "⏳ Waiting" :todo "WAIT")
          (:discard (:anything t)))))

(after! org-agenda
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator 'hr
        org-agenda-compact-blocks t
        org-agenda-start-with-log-mode t)
  (setq org-agenda-custom-commands
        '(("d" "📅 Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)
                        (org-agenda-overriding-header "📅 Agenda")))
            (todo "⚡ NEXT" ((org-agenda-overriding-header "⚡ Next Tasks")))
            (tags-todo "project/🚀 ACTIVE" ((org-agenda-overriding-header "🚀 Active Projects")))
            (tags-todo "+PRIORITY=\"A\"" ((org-agenda-overriding-header "🔥 High Priority")))
            (todo "⏳ WAIT" ((org-agenda-overriding-header "⏳ Waiting On")))
            (tags-todo "+habit" ((org-agenda-overriding-header "🔄 Habits")))
            (stuck "" ((org-agenda-overriding-header "🚫 Stuck Projects")))))
          ("p" "📋 Projects Overview"
           ((tags "project" ((org-agenda-overriding-header "📋 All Projects")))))
          ("g" "🎯 Goals Review"
           ((tags-todo "goal" ((org-agenda-overriding-header "🎯 Goals"))))))))
#+end_src

** Language: LaTeX & Citations
This configures the scientific writing environment for LaTeX, including the Tectonic compiler, LSP, and a citation system integrated with Org Roam.

#+begin_src emacs-lisp
(after! tex
  (setq TeX-engine 'tectonic)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (setq TeX-source-correlate-mode t)
  (setq TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook #'TeX-fold-mode)
  (add-hook 'LaTeX-mode-hook (lambda () (flycheck-add-checker 'tex-chktex))))

(add-hook 'LaTeX-mode-hook (lambda () (setq lsp-tex-server 'texlab)))

(use-package! laas :hook (LaTeX-mode . laas-mode))

(defun ar/latex-prettify-symbols-setup ()
  "Enable prettify-symbols-mode and add custom LaTeX ligatures."
  (prettify-symbols-mode 1)
  (mapc (lambda (rule) (push rule prettify-symbols-compose-rules))
        '(("\\sum" . ?∑) ("\\int" . ?∫) ("\\in" . ?∈) ("\\forall" . ?∀)
          ("\\exists" . ?∃) ("\\lambda" . ?λ) ("\\alpha" . ?α) ("\\beta" . ?β)
          ("\\gamma" . ?γ) ("\\delta" . ?δ) ("\\epsilon" . ?ε) ("\\pi" . ?π)
          ("\\rightarrow" . ?→) ("\\leftarrow" . ?←) ("\\Rightarrow" . ?⇒)
          ("\\leq" . ?≤) ("\\geq" . ?≥))))
(add-hook 'LaTeX-mode-hook #'ar/latex-prettify-symbols-setup)

(after! ox-latex
  (setq org-latex-compiler "tectonic")
  (setq org-latex-pdf-process '("tectonic -X compile %f -o %o"))
  (add-to-list 'org-latex-classes
               '("article" "\\documentclass{article}" ("\\section{%s}" . "\\section*{%s}"))))

(use-package! citar-org-roam :after (citar org-roam) :config (citar-org-roam-mode))
(use-package! citar-embark :after (citar embark) :config (citar-embark-mode))
#+end_src

** Language: Markdown
This section sets up a rich Markdown environment with live preview and a table of contents.

#+begin_src emacs-lisp
(use-package! md-roam
  :after markdown-mode
  :hook (markdown-mode . md-roam-mode)
  :config
  (defun ar/configure-md-roam-faces ()
    "Set md-roam faces to match theme."
    (set-face-attribute 'md-roam-h1-face nil :foreground (doom-color 'blue) :height 1.4 :weight 'bold)
    (set-face-attribute 'md-roam-h2-face nil :foreground (doom-color 'cyan) :height 1.3 :weight 'bold)
    (set-face-attribute 'md-roam-h3-face nil :foreground (doom-color 'magenta) :height 1.2 :weight 'bold)
    (set-face-attribute 'md-roam-h4-face nil :foreground (doom-color 'yellow) :height 1.1 :weight 'bold)
    (set-face-attribute 'md-roam-h5-face nil :foreground (doom-color 'orange) :height 1.0 :weight 'bold)
    (set-face-attribute 'md-roam-h6-face nil :foreground (doom-color 'fg) :height 1.0 :weight 'bold)
    (set-face-attribute 'md-roam-code-face nil :background (doom-color 'bg-alt))
    (set-face-attribute 'md-roam-blockquote-face nil :slant 'italic :foreground (doom-color 'comment)))
  (add-hook 'md-roam-mode-hook #'ar/configure-md-roam-faces))

(use-package! imenu-list :after markdown-mode)
#+end_src

* Miscellaneous
This section contains version control settings, snippet configurations, spell checking, and final keybindings.
** Version Control
#+begin_src emacs-lisp
(after! pdf-tools
  (setq pdf-view-midnight-colors (cons (doom-color 'bg) (doom-color 'fg)))
  (set-face-attribute 'pdf-view-highlight-face nil :background (doom-color 'cyan))
  (add-hook! 'pdf-view-mode-hook
    (defun +my/pdf-view-mode-setup ()
      (auto-revert-mode 1)
      (pdf-view-continuous-scroll-mode 1)
      (pdf-view-midnight-mode 1)
      (pdf-view-fit-width-to-window))))

(use-package! magit-todos :hook (magit-mode . magit-todos-mode))
(use-package! git-timemachine :after magit)
#+end_src

** Snippets (Yasnippet)
#+begin_src emacs-lisp
;; Custom user snippets are placed in `~/.config/doom/snippets/`.
;; For example, to create a new python snippet, create the file:
;; `~/.config/doom/snippets/python-mode/my-snippet.yas`

(use-package! yasnippet-capf
  :after cape
  :config
  (add-to-list 'completion-at-point-functions #'yasnippet-capf))

;; Make LaTeX snippets available in Org mode for scientific writing.
(add-hook 'org-mode-hook (lambda () (setq-local yas-parents '(latex-mode))))
#+end_src

** Spell Checking
#+begin_src emacs-lisp
;; (use-package! jinx
;;   :hook ((text-mode . jinx-mode)
;;          (prog-mode . jinx-mode)
;;          (org-mode . jinx-mode)
;;          (markdown-mode . jinx-mode)
;;          (git-commit-mode . jinx-mode))
;;   :bind (("M-$" . jinx-correct)
;;          ("C-M-$" . jinx-languages))
;;   :init
;;   (defvar my-jinx-ignored-words
;;     '("DoomEmacs" "Elisp" "EmacsLisp" "use-package" "tecosaur" "ibuffer" "vterm"
;;       "jinx-mode" "prog-mode" "conf-mode" "WIP" "regexp" "Ahsanur" "Rahman"
;;       "toc" "LaTeX" "cleverparens" "parens" "dirvish"))
;;   :config
;;   (setq jinx-languages "en_US")
;;   (setq jinx-delay 0.3)

;;   (push `(t . (,(concat "\\<\\(" (mapconcat #'regexp-quote my-jinx-ignored-words "\\|") "\\)\\>")))
;;         jinx-exclude-regexps)
;;   (push '(org-mode
;;           org-level-1 org-level-2 org-level-3 org-level-4
;;           org-level-5 org-level-6 org-level-7 org-level-8
;;           org-document-title org-block org-src-block
;;           org-meta-line org-table org-link)
;;         jinx-exclude-faces)
;;   (after! vertico
;;     (when (boundp 'vertico-multiform-categories)
;;       (add-to-list 'vertico-multiform-categories '(jinx (vertico-grid-annotate . t))))))
#+end_src

** Final Keybindings & System
#+begin_src emacs-lisp
(setq forge-owned-accounts '(("aahsnr")))

;; Global leader keys for general commands, compiling, and debugging
(map! :leader
      :desc "Open like spacemacs" "SPC" #'execute-extended-command
      ;; Compile/Cite prefix
      :prefix ("c" . "compile/cite")
      "c" '(TeX-command-master :wk "Compile Document")
      "v" '(TeX-view :wk "View Output")
      "b" '(citar-insert-citation :wk "Insert Citation")
      ;; Debug prefix
      :prefix ("d" . "debug")
      "d" '(dap-debug :wk "Debug...")
      "b" '(dap-toggle-breakpoint :wk "Toggle breakpoint"))

;; Python-specific leader keys
(map! :map python-mode-map
      :leader
      :prefix ("c" . "code")
      "c" '(python-execute-file :wk "Run file")
      "r" '(dap-python-run-repl :wk "Run project REPL"))
#+end_src
