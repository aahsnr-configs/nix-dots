#+TITLE: Doom Emacs Configuration
#+AUTHOR: Ahsanur Rahman
#+PROPERTY: header-args:emacs-lisp

* Core Emacs & User Configuration
This section sets up fundamental user information and core Emacs behavior. These settings provide a baseline for a stable and personalized experience.

#+begin_src emacs-lisp
(setq user-full-name "Ahsanur Rahman"
      user-mail-address "ahsanur041@proton.me")

;; Improve scrolling behavior
(setq scroll-error-top-bottom t
      scroll-conservatively 120
      scroll-margin 0)

;; Prefer vertical splits over horizontal ones.
(setq split-width-threshold 170
      split-height-threshold nil)

;; Set default indentation.
(setq-default indent-tabs-mode nil
              tab-width 2
              fill-column 80)

;; Frame Title Formatting
(setq-default frame-title-format
              '(:eval (if (buffer-file-name)
                          (format "[%s] - %s"
                                  (file-name-nondirectory (buffer-file-name))
                                  (system-name))
                        (format "[%s] - %s"
                                (buffer-name)
                                (system-name)))))

;; Mitigate performance issues on Wayland/PGTK builds
(when (fboundp 'pgtk-use-im-context)
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (with-selected-frame frame
                (pgtk-use-im-context nil)))))
#+end_src

* UI & Theming
This section configures the entire visual experience, from the color theme and fonts to the modeline and line numbers.

#+begin_src emacs-lisp
(use-package! doom-themes
  :defer t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-themes-treemacs-theme "doom-tokyo-night")
  :config
  (load-theme 'doom-tokyo-night t)
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config)
  ;; Set distinct colors for bold and italic
  (custom-set-faces
   '(bold ((t (:foreground "#7aa2f7" :weight bold))))
   '(italic ((t (:foreground "#bb9af7" :slant italic))))))

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 26.0)
      doom-symbol-font (font-spec :family "JetBrainsMono Nerd Font" :size 14.5))

(setq-default line-spacing 0.02)

(add-hook! 'doom-after-init-hook
  (defun +my/setup-font-faces ()
    (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)))

(after! which-key
  (setq which-key-idle-delay 0.1
        which-key-separator " → "
        which-key-popup-type 'minibuffer)
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . " \\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . " \\1"))))

(after! doom-modeline
  (setq doom-modeline-height 28
        doom-modeline-bar-width 3
        doom-modeline-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-buffer-file-name-style 'relative
        doom-modeline-vcs-max-length 12
        doom-modeline-env-version t))

;; Enable line numbers for programming modes
(add-hook! '(prog-mode-hook conf-mode-hook) #'display-line-numbers-mode)
;; Disable line numbers for other modes
(add-hook! '(org-mode-hook term-mode-hook shell-mode-hook eshell-mode-hook)
           #'(lambda () (display-line-numbers-mode -1)))

(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  (custom-set-faces
   `(rainbow-delimiters-depth-1-face ((t (:foreground ,(doom-color 'blue)))))
   `(rainbow-delimiters-depth-2-face ((t (:foreground ,(doom-color 'magenta)))))
   `(rainbow-delimiters-depth-3-face ((t (:foreground ,(doom-color 'yellow)))))
   `(rainbow-delimiters-depth-4-face ((t (:foreground ,(doom-color 'cyan)))))
   `(rainbow-delimiters-depth-5-face ((t (:foreground ,(doom-color 'red)))))
   `(rainbow-delimiters-depth-6-face ((t (:foreground ,(doom-color 'green)))))
   `(rainbow-delimiters-depth-7-face ((t (:foreground ,(doom-color 'orange)))))))
#+end_src

* Evil (Vim Emulation)
These settings customize Evil mode to better suit the workflow, including cursor appearance, escape behavior, and keybindings. Most evil extensions are omitted, as Doom provides excellent defaults.

#+begin_src emacs-lisp
(setq evil-v$-excludes-newline t
      evil-search-wrap nil
      evil-move-beyond-eol t
      evil-want-Y-yank-to-eol t)

;; Use doom-tokyo-night colors for cursors
(setq evil-normal-state-cursor `(box ,(doom-color 'orange))
      evil-insert-state-cursor `(bar ,(doom-color 'red))
      evil-visual-state-cursor `(hollow ,(doom-color 'orange)))

(after! evil-escape
  (setq evil-escape-key-sequence "jk"
        evil-escape-delay 0.2
        evil-escape-excluded-modes '(dired-mode)))

(after! evil-goggles
  (setq evil-goggles-duration 0.1))

(map! :map evil-normal-state-map
      "j" #'evil-next-visual-line
      "k" #'evil-previous-visual-line
      "g c" #'evilnc-comment-or-uncomment-lines)
(map! :map evil-visual-state-map
      "g c" #'evilnc-comment-or-uncomment-lines)
#+end_src

* Completion Framework
This section configures the Vertico/Corfu completion UI, ensuring a fast and responsive experience.

#+begin_src emacs-lisp
(after! vertico
  (setq vertico-count 10))

(after! corfu
  (setq corfu-auto-resize nil
        corfu-auto-delay 0.1))
#+end_src

* Project & File Management
This section configures tools for managing projects, buffers, and files, including Dired (the file manager) and Ibuffer (the buffer list).

#+begin_src emacs-lisp
;; Automatically clean up inactive buffers to reduce clutter.
(use-package! buffer-terminator
  :custom
  (buffer-terminator-verbose nil)
  (buffer-terminator-inactivity-timeout (* 30 60)) ; 30 minutes
  (buffer-terminator-interval (* 10 60)) ; 10 minutes
  :config
  (buffer-terminator-mode 1))

;; An enhanced help interface.
(use-package! helpful
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-function] . helpful-callable)
  ([remap describe-key] . helpful-key)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  :custom
  (helpful-max-buffers 7))

;; Dired (file manager) enhancements.
(use-package! dired-open
  :config
  (setq dired-open-extensions '(("png" . "imv") ("mp4" . "mpv"))))
(use-package! dired-git-info)
(use-package! dired-ranger
  :after dired
  :config
  (map! :map dired-mode-map
        "y" #'dired-ranger-copy
        "p" #'dired-ranger-paste
        "x" #'dired-ranger-move))

(after! dired
  (setq dired-listing-switches "-agho --group-directories-first"
        dired-omit-files "^\\.[^.]\\|^#\\|^\\.$\\|^\\.\\.$\\|\\.pyc$\\|\\.o$"
        dired-auto-revert-buffer t
        dired-dwim-target t
        dired-recursive-deletes 'always
        dired-recursive-copies 'always)
  (add-hook 'dired-mode-hook 'dired-hide-dotfiles-mode)
  (add-hook 'dired-mode-hook 'dired-git-info-mode)
  (map! :map dired-mode-map
        "h" #'dired-up-directory
        "l" #'dired-find-file-other-window
        "G" #'dired-goto-file
        "^" #'dired-goto-root-directory
        "~" #'dired-home
        "i" #'dired-maybe-insert-subdir
        "C-n" #'dired-create-file
        "C-d" #'dired-create-directory
        "R" #'dired-do-rename
        "X" #'dired-open-file))

#+end_src

* Development Environment
This section configures the core IDE features: Eglot for code intelligence, DApE for debugging, Flymake for linting, and Doom's native formatter.

** Formatting
#+begin_src emacs-lisp
;; This is the centralized, idiomatic Doom way to configure auto-formatters.
(set-formatter! 'ruff '("ruff" "format" "-"))
(set-formatter! 'latexindent '("latexindent" "-g" "/dev/null"))
(set-formatter! 'prettier '("prettier" "--prose-wrap" "always"))
#+end_src

** Language: Python
This section provides a complete IDE experience for Python, including LSP, debugging, and a comprehensive linting setup.

#+begin_src emacs-lisp
#+end_src

** Language: Jupyter
This configures Org mode's integration with Jupyter notebooks for interactive Python sessions.

#+begin_src emacs-lisp
(after! jupyter
  (setq jupyter-python-set-repl-for-current-buffer t
        jupyter-favorite-kernels '("python3")
        jupyter-repl-echo-evaluating-p nil
        jupyter-org-get-client-on-load t)
  (advice-add 'jupyter-org-interaction-mode :after
              (lambda () (evil-insert-state))))

(after! ob-jupyter
  (org-babel-do-load-languages 'org-babel-load-languages '((jupyter . t)))
  (org-babel-jupyter-override-src-block "python")
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src

** Language: LaTeX & Citations
This configures the scientific writing environment for LaTeX, including the Tectonic compiler, LSP, and a citation system integrated with Org Roam.

#+begin_src emacs-lisp
(after! tex
  (setq TeX-engine 'tectonic)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (setq TeX-source-correlate-mode t)
  (setq TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook #'TeX-fold-mode)
  (add-hook 'LaTeX-mode-hook (lambda () (flycheck-add-checker 'tex-chktex))))

(add-hook 'LaTeX-mode-hook (lambda () (setq lsp-tex-server 'texlab)))

(use-package! laas :hook (LaTeX-mode . laas-mode))

(defun ar/latex-prettify-symbols-setup ()
  "Enable prettify-symbols-mode and add custom LaTeX ligatures."
  (prettify-symbols-mode 1)
  (mapc (lambda (rule) (push rule prettify-symbols-compose-rules))
        '(("\\sum" . ?∑) ("\\int" . ?∫) ("\\in" . ?∈) ("\\forall" . ?∀)
          ("\\exists" . ?∃) ("\\lambda" . ?λ) ("\\alpha" . ?α) ("\\beta" . ?β)
          ("\\gamma" . ?γ) ("\\delta" . ?δ) ("\\epsilon" . ?ε) ("\\pi" . ?π)
          ("\\rightarrow" . ?→) ("\\leftarrow" . ?←) ("\\Rightarrow" . ?⇒)
          ("\\leq" . ?≤) ("\\geq" . ?≥))))
(add-hook 'LaTeX-mode-hook #'ar/latex-prettify-symbols-setup)

(after! ox-latex
  (setq org-latex-compiler "tectonic")
  (setq org-latex-pdf-process '("tectonic -X compile %f -o %o"))
  (add-to-list 'org-latex-classes
               '("article" "\\documentclass{article}" ("\\section{%s}" . "\\section*{%s}"))))

(use-package! citar-org-roam :after (citar org-roam) :config (citar-org-roam-mode))
(use-package! citar-embark :after (citar embark) :config (citar-embark-mode))
#+end_src

* Miscellaneous
This section contains version control settings, snippet configurations, spell checking, and final keybindings.
** Snippets (Yasnippet)
#+begin_src emacs-lisp
;; Custom user snippets are placed in `~/.config/doom/snippets/`.
;; For example, to create a new python snippet, create the file:
;; `~/.config/doom/snippets/python-mode/my-snippet.yas`

(use-package! yasnippet-capf
  :after cape
  :config
  (add-to-list 'completion-at-point-functions #'yasnippet-capf))

;; Make LaTeX snippets available in Org mode for scientific writing.
(add-hook 'org-mode-hook (lambda () (setq-local yas-parents '(latex-mode))))
#+end_src

** Spell Checking
#+begin_src emacs-lisp
;; (use-package! jinx
;;   :hook ((text-mode . jinx-mode)
;;          (prog-mode . jinx-mode)
;;          (org-mode . jinx-mode)
;;          (markdown-mode . jinx-mode)
;;          (git-commit-mode . jinx-mode))
;;   :bind (("M-$" . jinx-correct)
;;          ("C-M-$" . jinx-languages))
;;   :init
;;   (defvar my-jinx-ignored-words
;;     '("DoomEmacs" "Elisp" "EmacsLisp" "use-package" "tecosaur" "ibuffer" "vterm"
;;       "jinx-mode" "prog-mode" "conf-mode" "WIP" "regexp" "Ahsanur" "Rahman"
;;       "toc" "LaTeX" "cleverparens" "parens" "dirvish"))
;;   :config
;;   (setq jinx-languages "en_US")
;;   (setq jinx-delay 0.3)

;;   (push `(t . (,(concat "\\<\\(" (mapconcat #'regexp-quote my-jinx-ignored-words "\\|") "\\)\\>")))
;;         jinx-exclude-regexps)
;;   (push '(org-mode
;;           org-level-1 org-level-2 org-level-3 org-level-4
;;           org-level-5 org-level-6 org-level-7 org-level-8
;;           org-document-title org-block org-src-block
;;           org-meta-line org-table org-link)
;;         jinx-exclude-faces)
;;   (after! vertico
;;     (when (boundp 'vertico-multiform-categories)
;;       (add-to-list 'vertico-multiform-categories '(jinx (vertico-grid-annotate . t))))))
#+end_src

** Keybindings & System
#+begin_src emacs-lisp
(map! :leader
      :desc "Open like spacemacs" "SPC" #'execute-extended-command
      ;; Compile/Cite prefix
      :prefix ("c" . "compile/cite")
      "c" '(TeX-command-master :wk "Compile Document")
      "v" '(TeX-view :wk "View Output")
      "b" '(citar-insert-citation :wk "Insert Citation")
      ;; Debug prefix
      :prefix ("d" . "debug")
      "d" '(dap-debug :wk "Debug...")
      "b" '(dap-toggle-breakpoint :wk "Toggle breakpoint"))

;; Python-specific leader keys
(map! :map python-mode-map
      :leader
      :prefix ("c" . "code")
      "c" '(python-execute-file :wk "Run file")
      "r" '(dap-python-run-repl :wk "Run project REPL"))
#+end_src
